{"config":{"indexing":"full","lang":["ru","en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"\u041d\u0430\u0447\u0430\u043b\u043e"},{"location":"ESP32-ADC/","text":"Use of ADCs in ESP32 Arduino core Main information is from official docs \u0410ttenuation of Measured input voltage Vref is the reference voltage used internally by ESP32 ADCs for measuring the input voltage. The ESP32 ADCs can measure analog voltages from 0 V to Vref. Among different chips, the Vref varies, the median is 1.1 V. In order to convert voltages larger than Vref, input voltages can be attenuated before being input to the ADCs. The median of Vref is 1.1 V with 0 db attenuation(gain), most of the chips comes with factory calibrated ADC_cal values to check the Vref of your Chip verify if eFuse Vref is present by running the espefuse.py tool with adc_info parameter in CMD: ~/esptool_py/esptool/espefuse.py --port \"PORTNAME\" adc_info example return: ADC VRef calibration: 1093 mV There are 4 available attenuation options, the higher the attenuation is, the higher the measurable input voltage could be. You can change the attenuation (negative gain) of input voltage with analogSetAttenuation(val) ADC_ATTEN_DB_0 = 1 x Vref ADC_ATTEN_DB_2_5 = 1.33 x Vref ADC_ATTEN_DB_6 = 1.99 x Vref ADC_ATTEN_DB_11 = 3.54 x Vref +----------+-------------+-----------------+ | | attenuation | suggested range | | SoC | (dB) | (mV) | +==========+=============+=================+ | | 0 | 100 ~ 950 | | +-------------+-----------------+ | | 2.5 | 100 ~ 1250 | | ESP32 +-------------+-----------------+ | | 6 | 150 ~ 1750 | | +-------------+-----------------+ | | 11 | 150 ~ 2450 | +----------+-------------+-----------------+ | | 0 | 0 ~ 750 | | +-------------+-----------------+ | | 2.5 | 0 ~ 1050 | | ESP32-S2 +-------------+-----------------+ | | 6 | 0 ~ 1300 | | +-------------+-----------------+ | | 11 | 0 ~ 2500 | +----------+-------------+-----------------+ There is an online converter Decibels to Voltage Gain/Loss default values for ADC config default ADC resolution = 12 bit default Attenuation - 11 db Code functions For full available code functions check the core library: C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.4\\cores\\esp32\\esp32-hal-adc.c C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.4\\cores\\esp32\\esp32-hal-adc.h Here are listed some of the basics functions: analogReadResolution(resolution) : set the sample bits and resolution. It can be a value between 9 (0 \u2013 511) and 12 bits (0 \u2013 4095). Default is 12-bit resolution. analogSetWidth(width) : set the sample bits and resolution. It can be a value between 9 (0 \u2013 511) and 12 bits (0 \u2013 4095). Default is 12-bit resolution. analogSetCycles(cycles) : set the number of cycles per sample. Default is 8. Range: 1 to 255. analogSetSamples(samples) : set the number of samples in the range. Default is 1 sample. It has an effect of increasing sensitivity. analogSetClockDiv(attenuation) : set the divider for the ADC clock. Default is 1. Range: 1 to 255. analogSetAttenuation(attenuation) : sets the input attenuation for all ADC pins. Default is ADC_11db. Accepted values: ADC_0db: sets no attenuation. ADC can measure up to approximately 800 mV (1V input = ADC reading of 1088). ADC_2_5db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 1100 mV. (1V input = ADC reading of 3722). ADC_6db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 1350 mV. (1V input = ADC reading of 3033). ADC_11db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 2600 mV. (1V input = ADC reading of 1575). analogSetPinAttenuation(pin, attenuation) : sets the input attenuation for the specified pin. The default is ADC_11db. Attenuation values are the same from previous function. adcAttachPin(pin) : Attach a pin to ADC (also clears any other analog mode that could be on). Returns TRUE or FALSE result. adcStart(pin) , adcBusy(pin) and resultadcEnd(pin) : starts an ADC convertion on attached pin\u2019s bus. Check if conversion on the pin\u2019s ADC bus is currently running (returns TRUE or FALSE). Get the result of the conversion: returns 16-bit integer.","title":"Use of ADCs in ESP32 Arduino core"},{"location":"ESP32-ADC/#use-of-adcs-in-esp32-arduino-core","text":"Main information is from official docs","title":"Use of ADCs in ESP32 Arduino core"},{"location":"ESP32-ADC/#ttenuation-of-measured-input-voltage","text":"Vref is the reference voltage used internally by ESP32 ADCs for measuring the input voltage. The ESP32 ADCs can measure analog voltages from 0 V to Vref. Among different chips, the Vref varies, the median is 1.1 V. In order to convert voltages larger than Vref, input voltages can be attenuated before being input to the ADCs. The median of Vref is 1.1 V with 0 db attenuation(gain), most of the chips comes with factory calibrated ADC_cal values to check the Vref of your Chip verify if eFuse Vref is present by running the espefuse.py tool with adc_info parameter in CMD: ~/esptool_py/esptool/espefuse.py --port \"PORTNAME\" adc_info example return: ADC VRef calibration: 1093 mV There are 4 available attenuation options, the higher the attenuation is, the higher the measurable input voltage could be. You can change the attenuation (negative gain) of input voltage with analogSetAttenuation(val) ADC_ATTEN_DB_0 = 1 x Vref ADC_ATTEN_DB_2_5 = 1.33 x Vref ADC_ATTEN_DB_6 = 1.99 x Vref ADC_ATTEN_DB_11 = 3.54 x Vref +----------+-------------+-----------------+ | | attenuation | suggested range | | SoC | (dB) | (mV) | +==========+=============+=================+ | | 0 | 100 ~ 950 | | +-------------+-----------------+ | | 2.5 | 100 ~ 1250 | | ESP32 +-------------+-----------------+ | | 6 | 150 ~ 1750 | | +-------------+-----------------+ | | 11 | 150 ~ 2450 | +----------+-------------+-----------------+ | | 0 | 0 ~ 750 | | +-------------+-----------------+ | | 2.5 | 0 ~ 1050 | | ESP32-S2 +-------------+-----------------+ | | 6 | 0 ~ 1300 | | +-------------+-----------------+ | | 11 | 0 ~ 2500 | +----------+-------------+-----------------+ There is an online converter Decibels to Voltage Gain/Loss","title":"\u0410ttenuation of Measured input voltage"},{"location":"ESP32-ADC/#default-values-for-adc-config","text":"default ADC resolution = 12 bit default Attenuation - 11 db","title":"default values for ADC config"},{"location":"ESP32-ADC/#code-functions","text":"For full available code functions check the core library: C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.4\\cores\\esp32\\esp32-hal-adc.c C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.4\\cores\\esp32\\esp32-hal-adc.h Here are listed some of the basics functions: analogReadResolution(resolution) : set the sample bits and resolution. It can be a value between 9 (0 \u2013 511) and 12 bits (0 \u2013 4095). Default is 12-bit resolution. analogSetWidth(width) : set the sample bits and resolution. It can be a value between 9 (0 \u2013 511) and 12 bits (0 \u2013 4095). Default is 12-bit resolution. analogSetCycles(cycles) : set the number of cycles per sample. Default is 8. Range: 1 to 255. analogSetSamples(samples) : set the number of samples in the range. Default is 1 sample. It has an effect of increasing sensitivity. analogSetClockDiv(attenuation) : set the divider for the ADC clock. Default is 1. Range: 1 to 255. analogSetAttenuation(attenuation) : sets the input attenuation for all ADC pins. Default is ADC_11db. Accepted values: ADC_0db: sets no attenuation. ADC can measure up to approximately 800 mV (1V input = ADC reading of 1088). ADC_2_5db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 1100 mV. (1V input = ADC reading of 3722). ADC_6db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 1350 mV. (1V input = ADC reading of 3033). ADC_11db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 2600 mV. (1V input = ADC reading of 1575). analogSetPinAttenuation(pin, attenuation) : sets the input attenuation for the specified pin. The default is ADC_11db. Attenuation values are the same from previous function. adcAttachPin(pin) : Attach a pin to ADC (also clears any other analog mode that could be on). Returns TRUE or FALSE result. adcStart(pin) , adcBusy(pin) and resultadcEnd(pin) : starts an ADC convertion on attached pin\u2019s bus. Check if conversion on the pin\u2019s ADC bus is currently running (returns TRUE or FALSE). Get the result of the conversion: returns 16-bit integer.","title":"Code functions"},{"location":"boardInfo/","text":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0437\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u0417\u0434\u0440\u0430\u0432\u0435\u0439\u0442\u0435! \u0422\u0443\u043a \u0449\u0435 \u043d\u0430\u043c\u0435\u0440\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0437\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 ESP32-101-board \u0431\u0430\u0437\u0438\u0440\u0430\u043d\u0430 \u043d\u0430 \u0441\u044a\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0438\u044f \u0438 \u0448\u0438\u0440\u043e\u043a\u043e \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d \u043c\u0438\u043a\u0440\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 ESP32 \u043d\u0430 \u0444\u0438\u0440\u043c\u0430\u0442\u0430 Espressif . \u0422\u043e\u0432\u0430 \u0435 \u0448\u0438\u0440\u043e\u043a\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u0435\u043d \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0432 \u0441\u0444\u0435\u0440\u0430\u0442\u0430 \u043d\u0430 DIY \u0438 IoT \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0442\u0435. \u0414\u0432\u0443\u044f\u0434\u0440\u0435\u043d \u043c\u0438\u043a\u0440\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440 \u0441\u044a\u0441 WiFi \u0438 Bluetooth LE 5.0 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0432\u0430\u0449\u0438 \u043f\u043e-\u0433\u043e\u043b\u044f\u043c\u0430 \u0433\u044a\u0432\u043a\u0430\u0432\u043e\u0441\u0442 \u043f\u0440\u0438 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438\u0442\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u0441\u044a\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0438\u044f \u0441\u0432\u044f\u0442. \u0428\u0438\u0440\u043e\u043a\u043e\u0442\u043e \u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u0441\u0444\u0435\u0440\u0430\u0442\u0430 \u043d\u0430 \u043b\u044e\u0431\u0438\u0442\u0435\u043b\u0438\u0442\u0435 \u0441\u0435 \u0434\u044a\u043b\u0436\u0438 \u043d\u0430 \u0442\u043e\u0432\u0430, \u0447\u0435 \u0442\u043e\u0437\u0438 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0441\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430 \u0447\u0440\u0435\u0437 \u0432\u0435\u0447\u0435 \u043f\u043e\u0437\u043d\u0430\u0442\u0430\u0442\u0430 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e \u0445\u043e\u0440\u0430 \u0441\u0440\u0435\u0434\u0430 \u0437\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430\u043d\u0435 Arduino IDE \u0441\u0430\u043c\u043e \u0441 \u0434\u043e\u0431\u0430\u0432\u044f\u043d\u0442\u043e \u043d\u0430 \u0435\u0434\u0438\u043d \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u043d Add-on . \u041f\u043e\u0440\u0430\u0434\u0438 \u0442\u043e\u0432\u0430 \u0447\u0435 Arduino IDE \u043d\u0435 \u0435 native \u0441\u0440\u0435\u0434\u0430\u0442\u0430 \u0437\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u0438\u043c\u0430 \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u0438 \u043a\u0430\u043c\u044a\u043d\u0438 \u043d\u0430, \u043a\u043e\u0438\u0442\u043e \u0447\u043e\u0432\u0435\u043a \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u043f\u0430\u0434\u043d\u0435. \u0415\u0442\u043e \u0437\u0430\u0449\u043e \u043d\u0438\u0435 \u043e\u0442 VB-tronics \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0438\u0445\u043c\u0435 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u0442\u0430 \u043d\u0430 \u043a\u043e\u044f\u0442\u043e \u0434\u0430 \u0441\u0435 \u0440\u0430\u0437\u0433\u043b\u0435\u0434\u0430\u0442 \u0438 \u043e\u043f\u0438\u0448\u0430\u0442, \u0441 \u043d\u0430\u0433\u043b\u0435\u0434\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0442\u043e\u0437\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0447\u0440\u0435\u0437 \u0410\u0440\u0434\u0443\u0438\u043d\u043e \u0441\u0440\u0435\u0434\u0430\u0442\u0430. \u0420\u0430\u0437\u0431\u0438\u0440\u0430 \u0441\u0435, \u0437\u0430 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0432\u044a\u0437\u043d\u043e\u0436\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0435\u043b\u0430\u0440\u0430 \u0435 \u043d\u0443\u0436\u043d\u0430 \u0438 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u044f, \u0435\u0442\u043e \u0442\u0443\u043a \u0438\u0434\u0432\u0430 \u0438 \u043f\u043e\u043b\u0437\u0430\u0442\u0430 \u043d\u0430 ESP32-101-board \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \" \u0430\u0443\u0442 \u044a\u0444 \u0434\u0430 \u0431\u043e\u043a\u0441 \", \u0431\u0435\u0437 \u043d\u0443\u0436\u0434\u0430 \u043e\u0442 \u0431\u0440\u0435\u0434\u0431\u043e\u0440\u0434 \u0438 \u0434\u043e\u0441\u0430\u0434\u043d\u0438 \u043a\u0430\u0431\u0435\u043b\u0438. Board-101 ESP32-101-board \u0435 \u043f\u043b\u0430\u0442\u043a\u0430, \u0441\u044a\u0441\u0442\u043e\u044f\u0449\u0430 \u0441\u0435 \u043e\u0442 \u043c\u0438\u043a\u0440\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0438 \u0440\u0435\u0434\u0438\u0446\u0430 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u043d\u0438 \u043c\u043e\u0434\u0443\u043b\u0438, \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u043a\u044a\u043c \u043d\u0435\u0433\u043e. \u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u044f\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0435 ESP32 \u043f\u043e\u0434 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043d\u0430 30 pin -\u043e\u0432 \u043c\u043e\u0434\u0443\u043b. \u041f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u044f \u041c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u041f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u044f \u0411\u0443\u0442\u043e\u043d\u0438 \u2013 2 \u0431\u0440\u043e\u044f \u0420\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0435\u043d\u043a\u043e\u0434\u0435\u0440 + \u0431\u0443\u0442\u043e\u043d \u043d\u0430 \u043e\u0441\u0442\u0442\u0430 RGB-\u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u0422\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u043d\u0438 \u0446\u0438\u0444\u0440\u043e\u0432\u0438 \u0438\u0437\u0445\u043e\u0434\u0438 \u2013 3 \u0431\u0440\u043e\u044f \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a (2 \u043e\u0441\u0438) + \u0431\u0443\u0442\u043e\u043d \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u043d OLED \u0434\u0438\u0441\u043f\u043b\u0435\u0439 (128x64 \u043f\u0438\u043a\u0441\u0435\u043b\u0430, \u0435\u0434\u043d\u043e\u0446\u0432\u0435\u0442\u0435\u043d) \u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0435\u043d \u0441\u0435\u043d\u0437\u043e\u0440 \u0424\u043e\u0442\u043e\u0434\u0438\u043e\u0434 \u0418\u043d\u0444\u0440\u0430\u0447\u0435\u0440\u0432\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u0418\u043d\u0444\u0440\u0430\u0447\u0435\u0440\u0432\u0435\u043d \u043f\u0440\u0438\u0435\u043c\u043d\u0438\u043a \u0441 \u0434\u0435\u043c\u043e\u0434\u0443\u043b\u0430\u0442\u043e\u0440 (38kHz) \u041f\u0438\u0435\u0437\u043e-\u0437\u0443\u043c\u0435\u0440 \u0421\u0435\u043d\u0437\u043e\u0440\u0438 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 \u2013 3 \u0431\u0440\u043e\u044f \u0416\u0438\u0440\u043e\u0441\u043a\u043e\u043f/\u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u044a\u0440 (3 \u043e\u0441\u0438) MPU6050 \u0414\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0430 (\u0432\u044a\u043d\u0448\u043d\u0430) EEPROM \u043f\u0430\u043c\u0435\u0442 (\u043e\u043f\u0446\u0438\u044f) \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 32-\u0431\u0438\u0442\u043e\u0432 \u043c\u0438\u043a\u0440\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440, 1 \u0438\u043b\u0438 2 \u044f\u0434\u0440\u0430, \u0434\u043e 240MHz 520\u041aB SRAM, 4MB flash 802.11 b/g/n WiFi (2.4GHz) Bluetooth v4.2 Classic, BLE 34 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0443\u0435\u043c\u0438 \u0432\u0445\u043e\u0434\u043e-\u0438\u0437\u0445\u043e\u0434\u0430 12-\u0431\u0438\u0442\u043e\u0432 \u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u043e-\u0446\u0438\u0444\u0440\u043e\u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b\u0435\u043d \u043c\u043e\u0434\u0443\u043b (\u0434\u043e 18 \u043a\u0430\u043d\u0430\u043b\u0430) 8-\u0431\u0438\u0442\u043e\u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u043e-\u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b (2 \u043a\u0430\u043d\u0430\u043b\u0430) \u041a\u0430\u043f\u0430\u0446\u0438\u0442\u0438\u0432\u043d\u0438 \u0432\u0445\u043e\u0434\u043e\u0432\u0435 \u0437\u0430 \u0441\u0435\u043d\u0437\u043e\u0440\u0438 \u043d\u0430 \u0434\u043e\u043f\u0438\u0440 (10 \u043a\u0430\u043d\u0430\u043b\u0430) SPI : Serial Peripheral Interface 4 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 I2S : Inter-IC Sound (2 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430) I2C : Inter-Integrated Circuit (2 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430) UART : Universal asynchronous receiver-transmitter (3 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430, \u0435\u0434\u0438\u043d \u043e\u0442 \u043a\u043e\u0438\u0442\u043e \u043f\u0440\u0435\u0437 \u0432\u0433\u0440\u0430\u0434\u0435\u043d USB \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b) PWM : Pulse-width modulation (\u0448\u0438\u0440\u043e\u0447\u0438\u043d\u043d\u043e-\u0438\u043c\u043f\u0443\u043b\u0441\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0430\u0446\u0438\u044f \u0428\u0418\u041c , 16 \u043a\u0430\u043d\u0430\u043b\u0430) \u0412\u0433\u0440\u0430\u0434\u0435\u043d \u0434\u0430\u0442\u0447\u0438\u043a \u043d\u0430 \u0425\u043e\u043b ( \u0441\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u043c\u0430\u0433\u043d\u0438\u0442\u043d\u043e \u043f\u043e\u043b\u0435 ) 3.3V \u0440\u0430\u0431\u043e\u0442\u043d\u043e \u043d\u0430\u043f\u0440\u0435\u0436\u0435\u043d\u0438\u0435","title":"\u0418\u043d\u0444\u043e"},{"location":"boardInfo/#_1","text":"","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0437\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u043a\u0430"},{"location":"boardInfo/#_2","text":"\u0422\u0443\u043a \u0449\u0435 \u043d\u0430\u043c\u0435\u0440\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0437\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 ESP32-101-board \u0431\u0430\u0437\u0438\u0440\u0430\u043d\u0430 \u043d\u0430 \u0441\u044a\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0438\u044f \u0438 \u0448\u0438\u0440\u043e\u043a\u043e \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d \u043c\u0438\u043a\u0440\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 ESP32 \u043d\u0430 \u0444\u0438\u0440\u043c\u0430\u0442\u0430 Espressif . \u0422\u043e\u0432\u0430 \u0435 \u0448\u0438\u0440\u043e\u043a\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u0435\u043d \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0432 \u0441\u0444\u0435\u0440\u0430\u0442\u0430 \u043d\u0430 DIY \u0438 IoT \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0442\u0435. \u0414\u0432\u0443\u044f\u0434\u0440\u0435\u043d \u043c\u0438\u043a\u0440\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440 \u0441\u044a\u0441 WiFi \u0438 Bluetooth LE 5.0 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0432\u0430\u0449\u0438 \u043f\u043e-\u0433\u043e\u043b\u044f\u043c\u0430 \u0433\u044a\u0432\u043a\u0430\u0432\u043e\u0441\u0442 \u043f\u0440\u0438 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438\u0442\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u0441\u044a\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0438\u044f \u0441\u0432\u044f\u0442. \u0428\u0438\u0440\u043e\u043a\u043e\u0442\u043e \u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u0441\u0444\u0435\u0440\u0430\u0442\u0430 \u043d\u0430 \u043b\u044e\u0431\u0438\u0442\u0435\u043b\u0438\u0442\u0435 \u0441\u0435 \u0434\u044a\u043b\u0436\u0438 \u043d\u0430 \u0442\u043e\u0432\u0430, \u0447\u0435 \u0442\u043e\u0437\u0438 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0441\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430 \u0447\u0440\u0435\u0437 \u0432\u0435\u0447\u0435 \u043f\u043e\u0437\u043d\u0430\u0442\u0430\u0442\u0430 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e \u0445\u043e\u0440\u0430 \u0441\u0440\u0435\u0434\u0430 \u0437\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430\u043d\u0435 Arduino IDE \u0441\u0430\u043c\u043e \u0441 \u0434\u043e\u0431\u0430\u0432\u044f\u043d\u0442\u043e \u043d\u0430 \u0435\u0434\u0438\u043d \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u043d Add-on . \u041f\u043e\u0440\u0430\u0434\u0438 \u0442\u043e\u0432\u0430 \u0447\u0435 Arduino IDE \u043d\u0435 \u0435 native \u0441\u0440\u0435\u0434\u0430\u0442\u0430 \u0437\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u0438\u043c\u0430 \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u0438 \u043a\u0430\u043c\u044a\u043d\u0438 \u043d\u0430, \u043a\u043e\u0438\u0442\u043e \u0447\u043e\u0432\u0435\u043a \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u043f\u0430\u0434\u043d\u0435. \u0415\u0442\u043e \u0437\u0430\u0449\u043e \u043d\u0438\u0435 \u043e\u0442 VB-tronics \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0438\u0445\u043c\u0435 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u0442\u0430 \u043d\u0430 \u043a\u043e\u044f\u0442\u043e \u0434\u0430 \u0441\u0435 \u0440\u0430\u0437\u0433\u043b\u0435\u0434\u0430\u0442 \u0438 \u043e\u043f\u0438\u0448\u0430\u0442, \u0441 \u043d\u0430\u0433\u043b\u0435\u0434\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0442\u043e\u0437\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0447\u0440\u0435\u0437 \u0410\u0440\u0434\u0443\u0438\u043d\u043e \u0441\u0440\u0435\u0434\u0430\u0442\u0430. \u0420\u0430\u0437\u0431\u0438\u0440\u0430 \u0441\u0435, \u0437\u0430 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0432\u044a\u0437\u043d\u043e\u0436\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0435\u043b\u0430\u0440\u0430 \u0435 \u043d\u0443\u0436\u043d\u0430 \u0438 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u044f, \u0435\u0442\u043e \u0442\u0443\u043a \u0438\u0434\u0432\u0430 \u0438 \u043f\u043e\u043b\u0437\u0430\u0442\u0430 \u043d\u0430 ESP32-101-board \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \" \u0430\u0443\u0442 \u044a\u0444 \u0434\u0430 \u0431\u043e\u043a\u0441 \", \u0431\u0435\u0437 \u043d\u0443\u0436\u0434\u0430 \u043e\u0442 \u0431\u0440\u0435\u0434\u0431\u043e\u0440\u0434 \u0438 \u0434\u043e\u0441\u0430\u0434\u043d\u0438 \u043a\u0430\u0431\u0435\u043b\u0438.","title":"\u0417\u0434\u0440\u0430\u0432\u0435\u0439\u0442\u0435!"},{"location":"boardInfo/#board-101","text":"ESP32-101-board \u0435 \u043f\u043b\u0430\u0442\u043a\u0430, \u0441\u044a\u0441\u0442\u043e\u044f\u0449\u0430 \u0441\u0435 \u043e\u0442 \u043c\u0438\u043a\u0440\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0438 \u0440\u0435\u0434\u0438\u0446\u0430 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u043d\u0438 \u043c\u043e\u0434\u0443\u043b\u0438, \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u043a\u044a\u043c \u043d\u0435\u0433\u043e. \u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u044f\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0435 ESP32 \u043f\u043e\u0434 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043d\u0430 30 pin -\u043e\u0432 \u043c\u043e\u0434\u0443\u043b. \u041f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u044f \u041c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u041f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u044f \u0411\u0443\u0442\u043e\u043d\u0438 \u2013 2 \u0431\u0440\u043e\u044f \u0420\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0435\u043d\u043a\u043e\u0434\u0435\u0440 + \u0431\u0443\u0442\u043e\u043d \u043d\u0430 \u043e\u0441\u0442\u0442\u0430 RGB-\u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u0422\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u043d\u0438 \u0446\u0438\u0444\u0440\u043e\u0432\u0438 \u0438\u0437\u0445\u043e\u0434\u0438 \u2013 3 \u0431\u0440\u043e\u044f \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a (2 \u043e\u0441\u0438) + \u0431\u0443\u0442\u043e\u043d \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u043d OLED \u0434\u0438\u0441\u043f\u043b\u0435\u0439 (128x64 \u043f\u0438\u043a\u0441\u0435\u043b\u0430, \u0435\u0434\u043d\u043e\u0446\u0432\u0435\u0442\u0435\u043d) \u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0435\u043d \u0441\u0435\u043d\u0437\u043e\u0440 \u0424\u043e\u0442\u043e\u0434\u0438\u043e\u0434 \u0418\u043d\u0444\u0440\u0430\u0447\u0435\u0440\u0432\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u0418\u043d\u0444\u0440\u0430\u0447\u0435\u0440\u0432\u0435\u043d \u043f\u0440\u0438\u0435\u043c\u043d\u0438\u043a \u0441 \u0434\u0435\u043c\u043e\u0434\u0443\u043b\u0430\u0442\u043e\u0440 (38kHz) \u041f\u0438\u0435\u0437\u043e-\u0437\u0443\u043c\u0435\u0440 \u0421\u0435\u043d\u0437\u043e\u0440\u0438 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 \u2013 3 \u0431\u0440\u043e\u044f \u0416\u0438\u0440\u043e\u0441\u043a\u043e\u043f/\u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u044a\u0440 (3 \u043e\u0441\u0438) MPU6050 \u0414\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0430 (\u0432\u044a\u043d\u0448\u043d\u0430) EEPROM \u043f\u0430\u043c\u0435\u0442 (\u043e\u043f\u0446\u0438\u044f) \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 32-\u0431\u0438\u0442\u043e\u0432 \u043c\u0438\u043a\u0440\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440, 1 \u0438\u043b\u0438 2 \u044f\u0434\u0440\u0430, \u0434\u043e 240MHz 520\u041aB SRAM, 4MB flash 802.11 b/g/n WiFi (2.4GHz) Bluetooth v4.2 Classic, BLE 34 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0443\u0435\u043c\u0438 \u0432\u0445\u043e\u0434\u043e-\u0438\u0437\u0445\u043e\u0434\u0430 12-\u0431\u0438\u0442\u043e\u0432 \u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u043e-\u0446\u0438\u0444\u0440\u043e\u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b\u0435\u043d \u043c\u043e\u0434\u0443\u043b (\u0434\u043e 18 \u043a\u0430\u043d\u0430\u043b\u0430) 8-\u0431\u0438\u0442\u043e\u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u043e-\u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b (2 \u043a\u0430\u043d\u0430\u043b\u0430) \u041a\u0430\u043f\u0430\u0446\u0438\u0442\u0438\u0432\u043d\u0438 \u0432\u0445\u043e\u0434\u043e\u0432\u0435 \u0437\u0430 \u0441\u0435\u043d\u0437\u043e\u0440\u0438 \u043d\u0430 \u0434\u043e\u043f\u0438\u0440 (10 \u043a\u0430\u043d\u0430\u043b\u0430) SPI : Serial Peripheral Interface 4 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 I2S : Inter-IC Sound (2 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430) I2C : Inter-Integrated Circuit (2 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430) UART : Universal asynchronous receiver-transmitter (3 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430, \u0435\u0434\u0438\u043d \u043e\u0442 \u043a\u043e\u0438\u0442\u043e \u043f\u0440\u0435\u0437 \u0432\u0433\u0440\u0430\u0434\u0435\u043d USB \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b) PWM : Pulse-width modulation (\u0448\u0438\u0440\u043e\u0447\u0438\u043d\u043d\u043e-\u0438\u043c\u043f\u0443\u043b\u0441\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0430\u0446\u0438\u044f \u0428\u0418\u041c , 16 \u043a\u0430\u043d\u0430\u043b\u0430) \u0412\u0433\u0440\u0430\u0434\u0435\u043d \u0434\u0430\u0442\u0447\u0438\u043a \u043d\u0430 \u0425\u043e\u043b ( \u0441\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u043c\u0430\u0433\u043d\u0438\u0442\u043d\u043e \u043f\u043e\u043b\u0435 ) 3.3V \u0440\u0430\u0431\u043e\u0442\u043d\u043e \u043d\u0430\u043f\u0440\u0435\u0436\u0435\u043d\u0438\u0435","title":"Board-101"},{"location":"gpio/","text":"\u0420\u0435\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f GPIOs \u0420\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 ESP32-101-board \u0422\u0430\u0431\u043b\u0438\u0446\u0430 GPIOs 101-board \u0412\u0440\u044a\u0437\u043a\u0438 \u043d\u0430 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u043d\u0438\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u043e\u0442 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u043a\u044a\u043c \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430: GPIOs \u0437\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 ESP32-101-board GPIO / ESP32 pin \u041f\u0435\u0440\u0438\u0444\u0435\u0440\u0435\u043d \u041c\u043e\u0434\u0443\u043b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d \u0440\u0435\u0436\u0438\u043c GPIO2 / D2 LED-G/PO2 \u0417\u0435\u043b\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 / \u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0435\u043d \u0438\u0437\u0445\u043e\u0434 2 Digital Output, PWM GPIO4 / D4 LED-R/PO1 \u0427\u0435\u0440\u0432\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 / \u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0435\u043d \u0438\u0437\u0445\u043e\u0434 1 Digital Output, PWM GPIO5 / D5 <\u0441\u0432\u043e\u0431\u043e\u0434\u0435\u043d> \u041d\u044f\u043c\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432 ESP32-101-board - GPIO12 / D12 ENC-SW \u0411\u0443\u0442\u043e\u043d \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440 Digital Input GPIO13 / D13 ENC-A \u0421\u0438\u0433\u043d\u0430\u043b \u201cA\u201d \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440 Digital Input GPIO14 / D14 ENC-B \u0421\u0438\u0433\u043d\u0430\u043b \u201cB\u201d \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440 Digital Input GPIO15 / D15 BATT \u0418\u0437\u043c\u0435\u0440\u0432\u0430\u043d\u0435 \u043d\u0430 \u043d\u0438\u0432\u043e\u0442\u043e \u043d\u0430 \u0431\u0430\u0442\u0435\u0440\u0438\u044f\u0442\u0430 (\u043f\u0440\u0438 \u0437\u0430\u0445\u0440\u0430\u043d\u0432\u0430\u043d\u0435 \u043f\u0440\u0435\u0437 \u043a\u0443\u043f\u043b\u0443\u043d\u0433 \u201cPOWER\u201d) Analog Input GPIO16 / RX2 IR-RX \u0418\u043d\u0444\u0440\u0430-\u0447\u0435\u0440\u0432\u0435\u043d \u043f\u0440\u0438\u0435\u043c\u043d\u0438\u043a (\u0434\u0435\u043c\u043e\u0434\u0443\u043b\u0430\u0442\u043e\u0440, 38 kHz) Digital Input GPIO17 / TX2 IR-TX \u0418\u043d\u0444\u0440\u0430-\u0447\u0435\u0440\u0432\u0435\u043d \u0438\u0437\u043b\u044a\u0447\u0432\u0430\u0442\u0435\u043b (\u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434) Digital Output GPIO18 / D18 SW2 \u0411\u0443\u0442\u043e\u043d \u201cSW2\u201d Digital Input GPIO19 / D19 SW1 \u0411\u0443\u0442\u043e\u043d \u201cSW1\u201d Digital Input GPIO21 / D21 I2C-SDA \u041a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u201cI2C\u201d \u2013 \u0434\u0430\u043d\u043d\u043e\u0432\u0430 \u043b\u0438\u043d\u0438\u044f I2C-SDA GPIO22 / D22 I2C-SCL \u041a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u201cI2C\u201d \u2013 \u0442\u0430\u043a\u0442\u043e\u0432\u0430 \u043b\u0438\u043d\u0438\u044f I2C-SCL GPIO23 / D23 JOY-SW \u0411\u0443\u0442\u043e\u043d \u043d\u0430 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a\u0430 Digital Input GPIO25 / D25 LED-B/PO3 \u0421\u0438\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 / \u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0435\u043d \u0438\u0437\u0445\u043e\u0434 3 Digital Output, PWM GPIO26 / D26 PB \u041f\u0438\u0435\u0437\u043e-\u0437\u0443\u043c\u0435\u0440 PWM GPIO27 / D27 TS1 \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 \u201cTS1\u201d TOUCH GPIO32 / D32 TS3 \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 \u201cTS3\u201d TOUCH GPIO33 / D33 TS2 \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 \u201cTS2\u201d TOUCH GPIO34 / D34 PT \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0441\u0432\u0435\u0442\u043b\u0438\u043d\u0430 (\u0444\u043e\u0442\u043e-\u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440 ) Analog Input GPIO35 / D35 TMP \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430 (MCP9701) Analog Input GPIO36 / VP JOY-Y \u041e\u0441 \u201cY\u201d \u043d\u0430 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a\u0430 Analog Input GPIO39 / VN JOY-X \u041e\u0441 \u201cX\u201d \u043d\u0430 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a\u0430 Analog Input \u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0438 \u043a\u044a\u043c GPIOs 101-board I2C I2C e \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0437\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0430\u043d\u0438 \u043c\u043e\u0434\u0443\u043b\u0438 \u043a\u044a\u043c \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430. \u041a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 I2C-SDA \u0438 I2C-SCL \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0434\u0438\u0441\u043f\u043b\u0435\u044f, \u0436\u0438\u0440\u043e\u0441\u043a\u043e\u043f\u0430 \u0438 \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0430\u0442\u0430 \u043f\u0430\u043c\u0435\u0442. \u041e\u0442\u0434\u0435\u043b\u043d\u043e \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0441\u0435 \u0434\u043e\u0431\u0430\u0432\u044f\u0442 \u0438 \u043e\u0449\u0435 \u0432\u044a\u043d\u0448\u043d\u0438 \u043c\u043e\u0434\u0443\u043b\u0438, \u043a\u0430\u0442\u043e \u0437\u0430 \u0442\u043e\u0432\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u043a\u0443\u043f\u043b\u0443\u043d\u0433 I2C \u0432 \u0433\u043e\u0440\u043d\u0438\u044f \u043b\u044f\u0432 \u043a\u0440\u0430\u0439 \u043d\u0430 ESP32-101-board. \u0417\u0430 \u0434\u0430 \u0441\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0432\u0430\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0442\u0430, \u0432\u0441\u044f\u043a\u043e \u0438\u043c\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u0435\u043d \u0430\u0434\u0440\u0435\u0441: LCD \u0434\u0438\u0441\u043f\u043b\u0435\u0439 \u2013 0x3C \u0416\u0438\u0440\u043e\u0441\u043a\u043e\u043f \u2013 0x68 \u0412\u044a\u043d\u0448\u043d\u0430 \u043f\u0430\u043c\u0435\u0442 \u2013 0x50 \u0420\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0435\u043d\u043a\u043e\u0434\u0435\u0440 \u0421\u0438\u0433\u043d\u0430\u043b\u0438\u0442\u0435 Encoder-A \u0438 Encoder-B \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u043d\u0435 \u043f\u043e\u0441\u043e\u043a\u0430\u0442\u0430 \u043d\u0430 \u0432\u044a\u0440\u0442\u0435\u043d\u0435 \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440. \u0418 \u0434\u0432\u0430\u0442\u0430 \u043f\u0438\u043d\u0430 \u0438\u043c\u0430\u0442 \u0437\u0430\u043b\u043e\u0436\u0435\u043d\u0438 pull-up \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 \u0438 \u0444\u0438\u043b\u0442\u0440\u043e\u0432\u0438 \u043a\u043e\u043d\u0434\u0435\u043d\u0437\u0430\u0442\u043e\u0440\u0438 \u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430\u0442\u0430. \u0411\u0443\u0442\u043e\u043d\u0438 \u041f\u0438\u043d\u043e\u0432\u0435\u0442\u0435, \u043a\u044a\u043c \u043a\u043e\u0438\u0442\u043e \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0431\u0443\u0442\u043e\u043d\u0438\u0442\u0435 (SW1, SW2, ENC-SW, JOY-SW), \u043d\u044f\u043c\u0430\u0442 \u0437\u0430\u043b\u043e\u0436\u0435\u043d\u0438 pull-up \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 \u2013 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0435 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u0441\u043e\u0444\u0442\u0443\u0435\u0440\u043d\u0438\u0442\u0435 \u0442\u0430\u043a\u0438\u0432\u0430! \u0421\u044a\u0449\u043e \u0442\u0430\u043a\u0430 \u043d\u044f\u043c\u0430\u0442 \u0437\u0430\u043b\u043e\u0436\u0435\u043d\u0438 \u0444\u0438\u043b\u0442\u0440\u043e\u0432\u0438 \u043a\u043e\u043d\u0434\u0435\u043d\u0437\u0430\u0442\u043e\u0440\u0438 \u2013 \u0437\u0430 \u0446\u0435\u043b\u0442\u0430 \u0441\u0435 \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442 \u0441\u043e\u0444\u0442\u0443\u0435\u0440\u043d\u0438 \u0442\u0435\u0445\u043d\u0438\u043a\u0438 \u0437\u0430 \u0444\u0438\u043b\u0442\u0440\u0438\u0440\u0430\u043d\u0435 \u0442\u0440\u0435\u043f\u0442\u0435\u043d\u0438\u044f\u0442\u0430 \u043d\u0430 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0438\u0442\u0435. \u0415\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0430 \u0441\u0445\u0435\u043c\u0430 \u0415\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0438\u0437\u0442\u0435\u0433\u043b\u0438\u0442\u0435 \u043a\u0430\u0442\u043e PDF \u043e\u0442 \u0442\u0443\u043a \u0438\u043b\u0438 \u0434\u0430 \u0437\u0430\u043f\u0430\u0437\u0438\u0442\u0435 \u0441\u043d\u0438\u043c\u043a\u0430\u0442\u0430 \u043f\u043e-\u0434\u043e\u043b\u0443: \u041c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0415SP32 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 GPIOs \u0422\u0430\u0431\u043b\u0438\u0446\u0430 GPIOs GPIO / ESP32 \u041e\u0441\u043d\u043e\u0432\u043d\u0438 \u0420\u0435\u0436\u0438\u043c\u0438 \u0412\u0430\u0436\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0412\u0445\u043e\u0434 \u0418\u0437\u0445\u043e\u0434 0 / - GPIO0 , ADC2_CH1 , TOUCH1 pull-up; \u043d\u0435 \u0435 \u0438\u0437\u0432\u0435\u0434\u0435\u043d \u043d\u0430 \u043f\u0438\u043d; \u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c \u0431\u0443\u0442\u043e\u043d \u201cBOOT\u201d; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 PWM \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 1 / TX0 GPIO1 , UART0_TX \u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c USB-\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b\u044f; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 debug \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 2 / D2 GPIO2 , ADC2_CH2 , TOUCH2 pull-down 3 / RX0 GPIO3 , UART0_RX \u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c USB-\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b\u044f; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 \u0432\u0438\u0441\u043e\u043a\u043e \u043d\u0438\u0432\u043e \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 4 / D4 GPIO4 , ADC2_CH0 , TOUCH0 pull-down 5 / D5 GPIO5 , VSPI_CS pull-up; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 PWM \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 6 - 11 GPIO6 - GPIO11 , SD , SPI, UART1 \u043d\u0435 \u0441\u0430 \u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438 \u043d\u0430 \u043f\u0438\u043d\u043e\u0432\u0435; \u043a\u044a\u043c \u0442\u044f\u0445 \u0435 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043d\u0430\u0442\u0430 (\u0444\u043b\u0430\u0448) \u043f\u0430\u043c\u0435\u0442 \u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430; \u043d\u0435 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0441\u043a\u0430\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 12 / D12 GPIO12 , ADC2_CH5 , TOUCH5 , HSPI_MISO pull-down; \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u044a\u0442 \u043d\u0435 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430 \u0430\u043a\u043e \u043f\u043e \u0432\u0440\u0435\u043c\u0435 \u043d\u0430 \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u0438\u043b\u0438 \u0440\u0435\u0441\u0442\u0430\u0440\u0442 \u0438\u043c\u0430 \u0432\u0438\u0441\u043e\u043a\u043e \u043d\u0438\u0432\u043e 13 / D13 GPIO13 , ADC2_CH4 , TOUCH4 , HSPI_MOSI 14 / D14 GPIO14 , ADC2_CH6 , TOUCH6 , HSPI_CLK \u0438\u0437\u0432\u0435\u0436\u0434\u0430 PWM \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 15 / D15 GPIO15 , ADC2_CH3 , TOUCH3 , HSPI_CS pull-up; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 PWM \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 16 / RX2 GPIO16, UART2_RX 17 / TX2 GPIO17 , UART2_TX 18 / D18 GPIO18, VSPI_CLK 19 / D19 GPIO19 , VSPI_MISO 21 / D21 GPIO21 , I2C_SDA 22 / D22 GPIO22, I2C_SCL 23 / D23 GPIO23 , VSPI_MOSI 25 / D25 GPIO25 , ADC2_CH8 , DAC , I2S 26 / D26 GPIO26 , ADC2_CH9 , DAC , I2S 27 / D27 GPIO27 , ADC2_CH7 , TOUCH7 , I2S 32 / D32 GPIO32 , ADC1_CH4 , TOUCH9 33 / D33 GPIO33 , ADC1_CH5 , TOUCH8 34 / D34 GPI34 , ADC1_CH6 \u0441\u0430\u043c\u043e \u0446\u0438\u0444\u0440\u043e\u0432 \u0432\u0445\u043e\u0434 (\u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0445\u043e\u0434); \u043d\u044f\u043c\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 35 / D35 GPI35 , ADC1_CH7 \u0441\u0430\u043c\u043e \u0446\u0438\u0444\u0440\u043e\u0432 \u0432\u0445\u043e\u0434 (\u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0445\u043e\u0434); \u043d\u044f\u043c\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 36 / VP GPI36 , ADC1_CH0 \u0441\u0430\u043c\u043e \u0446\u0438\u0444\u0440\u043e\u0432 \u0432\u0445\u043e\u0434 (\u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0445\u043e\u0434); \u043d\u044f\u043c\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 39 / VN GPI39 , ADC1_CH3 \u0441\u0430\u043c\u043e \u0446\u0438\u0444\u0440\u043e\u0432 \u0432\u0445\u043e\u0434 (\u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0445\u043e\u0434); \u043d\u044f\u043c\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0439 \u0441\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u043d\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0439 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0439 \u0441 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 ,\u0432\u0438\u0436 \u0437\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0438 \u0421\u043d\u0438\u043c\u043a\u0430 GPIOs \u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0438 \u043a\u044a\u043c GPIOs \u041f\u0438\u043d\u043e\u0432\u0435 GPIO 0, 2, 4, 5, 12, 15 \u0443\u0447\u0430\u0441\u0442\u0432\u0430\u0442 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0430 \u043f\u043e \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u0438 \u0435 \u0432\u0430\u0436\u043d\u043e \u0432 \u043f\u044a\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u043d\u0438\u044f \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u0442\u0430 \u0438\u043c \u0434\u0430 \u0441\u0430 \u043a\u0430\u043a\u0442\u043e \u0441\u0430 \u043f\u043e\u0441\u043e\u0447\u0435\u043d\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0442\u0430 (\u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0441\u044a\u043e\u0431\u0440\u0430\u0437\u0438 \u0441\u0445\u0435\u043c\u0430\u0442\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 \u043a\u043e\u0433\u0430\u0442\u043e \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u043a\u0430\u0442\u043e \u0432\u0445\u043e\u0434\u043e\u0432\u0435)! \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u0435\u043d \u0441\u043b\u0443\u0447\u0430\u0439 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u043d\u044f\u043c\u0430 \u0434\u0430 \u0437\u0430\u043f\u043e\u0447\u043d\u0435 \u0434\u0430 \u0438\u0437\u043f\u044a\u043b\u043d\u044f\u0432\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430\u0442\u0430! \u041f\u0438\u043d\u043e\u0432\u0435 GPIO 0, 1, 3, 5, 14, 15 \u043f\u043e \u0432\u0440\u0435\u043c\u0435 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0432\u0430\u0442 \u0432\u044a\u0432 \u0432\u0438\u0441\u043e\u043a\u043e \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u043a\u043e\u0435\u0442\u043e \u043c\u043e\u0436\u0435 \u0434\u0430 \u0434\u043e\u0432\u0435\u0434\u0435 \u0434\u043e \u043d\u0435\u0436\u0435\u043b\u0430\u0442\u0435\u043b\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u043d\u0438 \u043c\u043e\u0434\u0443\u043b\u0438 (\u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0441\u044a\u043e\u0431\u0440\u0430\u0437\u0438 \u0441\u0445\u0435\u043c\u0430\u0442\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 \u043a\u043e\u0433\u0430\u0442\u043e \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u043a\u0430\u0442\u043e \u0438\u0437\u0445\u043e\u0434\u0438)! \u041f\u0438\u043d\u043e\u0432\u0435 GPIO 34, 35, 36, 39 \u043d\u0435 \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043a\u0430\u0442\u043e \u0438\u0437\u0445\u043e\u0434\u0438! \u041e\u0441\u0432\u0435\u043d \u0442\u043e\u0432\u0430 \u043d\u044f\u043c\u0430\u0442 \u0432\u044a\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442 \u0437\u0430 \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438! \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u0438 \u0432\u0445\u043e\u0434\u043e\u0432\u0435 ADC1 ADC2 \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u0438\u0442\u0435 \u0432\u0445\u043e\u0434\u043e\u0432\u0435 \u043e\u0442 \u043c\u043e\u0434\u0443\u043b ADC2 (\u043e\u0442 ADC2_CH0 \u0434\u043e ADC2_CH9 ) \u043d\u0435 \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0440\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d WiFi \u043c\u043e\u0434\u0443\u043b! \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u0438\u0442\u0435 \u0432\u0445\u043e\u0434\u043e\u0432\u0435 \u043e\u0442 \u043c\u043e\u0434\u0443\u043b ADC1 \u0440\u0430\u0431\u043e\u0442\u044f\u0442 \u0432\u0438\u043d\u0430\u0433\u0438! \u041e\u0431\u0449\u043e \u0437\u0430 GPIO \u0412\u0441\u0438\u0447\u043a\u043e \u043f\u0438\u043d\u043e\u0432\u0435, \u043a\u043e\u0438\u0442\u043e \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043a\u0430\u0442\u043e \u0432\u0445\u043e\u0434\u043e\u0432\u0435, \u0438\u043c\u0430\u0442 \u0438 \u043f\u0440\u0435\u043a\u044a\u0441\u0432\u0430\u043d\u0438\u044f (\u043f\u0440\u043e\u043c\u044f\u043d\u0430 \u043d\u0430 \u043d\u0438\u0432\u043e \u0438\u043b\u0438 \u0444\u0440\u043e\u043d\u0442) \u0412\u0441\u0438\u0447\u043a\u0438 \u043f\u0438\u043d\u043e\u0432\u0435, \u043a\u043e\u0438\u0442\u043e \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043a\u0430\u0442\u043e \u0438\u0437\u0445\u043e\u0434\u0438, \u0438\u043c\u0430\u0442 \u0438 PWM \u0444\u0443\u043d\u043a\u0446\u0438\u044f (\u0448\u0438\u0440\u043e\u0447\u0438\u043d\u043d\u043e-\u0438\u043c\u043f\u0443\u043b\u0441\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0430\u0446\u0438\u044f)","title":"\u0420\u0435\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f I/O"},{"location":"gpio/#gpios","text":"","title":"\u0420\u0435\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f GPIOs"},{"location":"gpio/#esp32-101-board","text":"","title":"\u0420\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 ESP32-101-board"},{"location":"gpio/#gpios-101-board","text":"\u0412\u0440\u044a\u0437\u043a\u0438 \u043d\u0430 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u043d\u0438\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u043e\u0442 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u043a\u044a\u043c \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430: GPIOs \u0437\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 ESP32-101-board GPIO / ESP32 pin \u041f\u0435\u0440\u0438\u0444\u0435\u0440\u0435\u043d \u041c\u043e\u0434\u0443\u043b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d \u0440\u0435\u0436\u0438\u043c GPIO2 / D2 LED-G/PO2 \u0417\u0435\u043b\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 / \u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0435\u043d \u0438\u0437\u0445\u043e\u0434 2 Digital Output, PWM GPIO4 / D4 LED-R/PO1 \u0427\u0435\u0440\u0432\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 / \u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0435\u043d \u0438\u0437\u0445\u043e\u0434 1 Digital Output, PWM GPIO5 / D5 <\u0441\u0432\u043e\u0431\u043e\u0434\u0435\u043d> \u041d\u044f\u043c\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432 ESP32-101-board - GPIO12 / D12 ENC-SW \u0411\u0443\u0442\u043e\u043d \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440 Digital Input GPIO13 / D13 ENC-A \u0421\u0438\u0433\u043d\u0430\u043b \u201cA\u201d \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440 Digital Input GPIO14 / D14 ENC-B \u0421\u0438\u0433\u043d\u0430\u043b \u201cB\u201d \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440 Digital Input GPIO15 / D15 BATT \u0418\u0437\u043c\u0435\u0440\u0432\u0430\u043d\u0435 \u043d\u0430 \u043d\u0438\u0432\u043e\u0442\u043e \u043d\u0430 \u0431\u0430\u0442\u0435\u0440\u0438\u044f\u0442\u0430 (\u043f\u0440\u0438 \u0437\u0430\u0445\u0440\u0430\u043d\u0432\u0430\u043d\u0435 \u043f\u0440\u0435\u0437 \u043a\u0443\u043f\u043b\u0443\u043d\u0433 \u201cPOWER\u201d) Analog Input GPIO16 / RX2 IR-RX \u0418\u043d\u0444\u0440\u0430-\u0447\u0435\u0440\u0432\u0435\u043d \u043f\u0440\u0438\u0435\u043c\u043d\u0438\u043a (\u0434\u0435\u043c\u043e\u0434\u0443\u043b\u0430\u0442\u043e\u0440, 38 kHz) Digital Input GPIO17 / TX2 IR-TX \u0418\u043d\u0444\u0440\u0430-\u0447\u0435\u0440\u0432\u0435\u043d \u0438\u0437\u043b\u044a\u0447\u0432\u0430\u0442\u0435\u043b (\u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434) Digital Output GPIO18 / D18 SW2 \u0411\u0443\u0442\u043e\u043d \u201cSW2\u201d Digital Input GPIO19 / D19 SW1 \u0411\u0443\u0442\u043e\u043d \u201cSW1\u201d Digital Input GPIO21 / D21 I2C-SDA \u041a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u201cI2C\u201d \u2013 \u0434\u0430\u043d\u043d\u043e\u0432\u0430 \u043b\u0438\u043d\u0438\u044f I2C-SDA GPIO22 / D22 I2C-SCL \u041a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u201cI2C\u201d \u2013 \u0442\u0430\u043a\u0442\u043e\u0432\u0430 \u043b\u0438\u043d\u0438\u044f I2C-SCL GPIO23 / D23 JOY-SW \u0411\u0443\u0442\u043e\u043d \u043d\u0430 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a\u0430 Digital Input GPIO25 / D25 LED-B/PO3 \u0421\u0438\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 / \u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0435\u043d \u0438\u0437\u0445\u043e\u0434 3 Digital Output, PWM GPIO26 / D26 PB \u041f\u0438\u0435\u0437\u043e-\u0437\u0443\u043c\u0435\u0440 PWM GPIO27 / D27 TS1 \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 \u201cTS1\u201d TOUCH GPIO32 / D32 TS3 \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 \u201cTS3\u201d TOUCH GPIO33 / D33 TS2 \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 \u201cTS2\u201d TOUCH GPIO34 / D34 PT \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0441\u0432\u0435\u0442\u043b\u0438\u043d\u0430 (\u0444\u043e\u0442\u043e-\u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440 ) Analog Input GPIO35 / D35 TMP \u0421\u0435\u043d\u0437\u043e\u0440 \u0437\u0430 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430 (MCP9701) Analog Input GPIO36 / VP JOY-Y \u041e\u0441 \u201cY\u201d \u043d\u0430 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a\u0430 Analog Input GPIO39 / VN JOY-X \u041e\u0441 \u201cX\u201d \u043d\u0430 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a\u0430 Analog Input","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 GPIOs 101-board"},{"location":"gpio/#gpios-101-board_1","text":"I2C I2C e \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0437\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0430\u043d\u0438 \u043c\u043e\u0434\u0443\u043b\u0438 \u043a\u044a\u043c \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430. \u041a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 I2C-SDA \u0438 I2C-SCL \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0434\u0438\u0441\u043f\u043b\u0435\u044f, \u0436\u0438\u0440\u043e\u0441\u043a\u043e\u043f\u0430 \u0438 \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0430\u0442\u0430 \u043f\u0430\u043c\u0435\u0442. \u041e\u0442\u0434\u0435\u043b\u043d\u043e \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0441\u0435 \u0434\u043e\u0431\u0430\u0432\u044f\u0442 \u0438 \u043e\u0449\u0435 \u0432\u044a\u043d\u0448\u043d\u0438 \u043c\u043e\u0434\u0443\u043b\u0438, \u043a\u0430\u0442\u043e \u0437\u0430 \u0442\u043e\u0432\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u043a\u0443\u043f\u043b\u0443\u043d\u0433 I2C \u0432 \u0433\u043e\u0440\u043d\u0438\u044f \u043b\u044f\u0432 \u043a\u0440\u0430\u0439 \u043d\u0430 ESP32-101-board. \u0417\u0430 \u0434\u0430 \u0441\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0432\u0430\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0442\u0430, \u0432\u0441\u044f\u043a\u043e \u0438\u043c\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u0435\u043d \u0430\u0434\u0440\u0435\u0441: LCD \u0434\u0438\u0441\u043f\u043b\u0435\u0439 \u2013 0x3C \u0416\u0438\u0440\u043e\u0441\u043a\u043e\u043f \u2013 0x68 \u0412\u044a\u043d\u0448\u043d\u0430 \u043f\u0430\u043c\u0435\u0442 \u2013 0x50 \u0420\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0435\u043d\u043a\u043e\u0434\u0435\u0440 \u0421\u0438\u0433\u043d\u0430\u043b\u0438\u0442\u0435 Encoder-A \u0438 Encoder-B \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u043d\u0435 \u043f\u043e\u0441\u043e\u043a\u0430\u0442\u0430 \u043d\u0430 \u0432\u044a\u0440\u0442\u0435\u043d\u0435 \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440. \u0418 \u0434\u0432\u0430\u0442\u0430 \u043f\u0438\u043d\u0430 \u0438\u043c\u0430\u0442 \u0437\u0430\u043b\u043e\u0436\u0435\u043d\u0438 pull-up \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 \u0438 \u0444\u0438\u043b\u0442\u0440\u043e\u0432\u0438 \u043a\u043e\u043d\u0434\u0435\u043d\u0437\u0430\u0442\u043e\u0440\u0438 \u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430\u0442\u0430. \u0411\u0443\u0442\u043e\u043d\u0438 \u041f\u0438\u043d\u043e\u0432\u0435\u0442\u0435, \u043a\u044a\u043c \u043a\u043e\u0438\u0442\u043e \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0431\u0443\u0442\u043e\u043d\u0438\u0442\u0435 (SW1, SW2, ENC-SW, JOY-SW), \u043d\u044f\u043c\u0430\u0442 \u0437\u0430\u043b\u043e\u0436\u0435\u043d\u0438 pull-up \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 \u2013 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0435 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u0441\u043e\u0444\u0442\u0443\u0435\u0440\u043d\u0438\u0442\u0435 \u0442\u0430\u043a\u0438\u0432\u0430! \u0421\u044a\u0449\u043e \u0442\u0430\u043a\u0430 \u043d\u044f\u043c\u0430\u0442 \u0437\u0430\u043b\u043e\u0436\u0435\u043d\u0438 \u0444\u0438\u043b\u0442\u0440\u043e\u0432\u0438 \u043a\u043e\u043d\u0434\u0435\u043d\u0437\u0430\u0442\u043e\u0440\u0438 \u2013 \u0437\u0430 \u0446\u0435\u043b\u0442\u0430 \u0441\u0435 \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442 \u0441\u043e\u0444\u0442\u0443\u0435\u0440\u043d\u0438 \u0442\u0435\u0445\u043d\u0438\u043a\u0438 \u0437\u0430 \u0444\u0438\u043b\u0442\u0440\u0438\u0440\u0430\u043d\u0435 \u0442\u0440\u0435\u043f\u0442\u0435\u043d\u0438\u044f\u0442\u0430 \u043d\u0430 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0438\u0442\u0435.","title":"\u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0438 \u043a\u044a\u043c GPIOs 101-board"},{"location":"gpio/#_1","text":"\u0415\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0438\u0437\u0442\u0435\u0433\u043b\u0438\u0442\u0435 \u043a\u0430\u0442\u043e PDF \u043e\u0442 \u0442\u0443\u043a \u0438\u043b\u0438 \u0434\u0430 \u0437\u0430\u043f\u0430\u0437\u0438\u0442\u0435 \u0441\u043d\u0438\u043c\u043a\u0430\u0442\u0430 \u043f\u043e-\u0434\u043e\u043b\u0443:","title":"\u0415\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0430 \u0441\u0445\u0435\u043c\u0430"},{"location":"gpio/#sp32","text":"","title":"\u041c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0415SP32"},{"location":"gpio/#gpios_1","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 GPIOs GPIO / ESP32 \u041e\u0441\u043d\u043e\u0432\u043d\u0438 \u0420\u0435\u0436\u0438\u043c\u0438 \u0412\u0430\u0436\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0412\u0445\u043e\u0434 \u0418\u0437\u0445\u043e\u0434 0 / - GPIO0 , ADC2_CH1 , TOUCH1 pull-up; \u043d\u0435 \u0435 \u0438\u0437\u0432\u0435\u0434\u0435\u043d \u043d\u0430 \u043f\u0438\u043d; \u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c \u0431\u0443\u0442\u043e\u043d \u201cBOOT\u201d; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 PWM \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 1 / TX0 GPIO1 , UART0_TX \u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c USB-\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b\u044f; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 debug \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 2 / D2 GPIO2 , ADC2_CH2 , TOUCH2 pull-down 3 / RX0 GPIO3 , UART0_RX \u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c USB-\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u0442\u0435\u043b\u044f; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 \u0432\u0438\u0441\u043e\u043a\u043e \u043d\u0438\u0432\u043e \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 4 / D4 GPIO4 , ADC2_CH0 , TOUCH0 pull-down 5 / D5 GPIO5 , VSPI_CS pull-up; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 PWM \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 6 - 11 GPIO6 - GPIO11 , SD , SPI, UART1 \u043d\u0435 \u0441\u0430 \u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438 \u043d\u0430 \u043f\u0438\u043d\u043e\u0432\u0435; \u043a\u044a\u043c \u0442\u044f\u0445 \u0435 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043d\u0430\u0442\u0430 (\u0444\u043b\u0430\u0448) \u043f\u0430\u043c\u0435\u0442 \u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430; \u043d\u0435 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0441\u043a\u0430\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 12 / D12 GPIO12 , ADC2_CH5 , TOUCH5 , HSPI_MISO pull-down; \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u044a\u0442 \u043d\u0435 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430 \u0430\u043a\u043e \u043f\u043e \u0432\u0440\u0435\u043c\u0435 \u043d\u0430 \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u0438\u043b\u0438 \u0440\u0435\u0441\u0442\u0430\u0440\u0442 \u0438\u043c\u0430 \u0432\u0438\u0441\u043e\u043a\u043e \u043d\u0438\u0432\u043e 13 / D13 GPIO13 , ADC2_CH4 , TOUCH4 , HSPI_MOSI 14 / D14 GPIO14 , ADC2_CH6 , TOUCH6 , HSPI_CLK \u0438\u0437\u0432\u0435\u0436\u0434\u0430 PWM \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 15 / D15 GPIO15 , ADC2_CH3 , TOUCH3 , HSPI_CS pull-up; \u0438\u0437\u0432\u0435\u0436\u0434\u0430 PWM \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 16 / RX2 GPIO16, UART2_RX 17 / TX2 GPIO17 , UART2_TX 18 / D18 GPIO18, VSPI_CLK 19 / D19 GPIO19 , VSPI_MISO 21 / D21 GPIO21 , I2C_SDA 22 / D22 GPIO22, I2C_SCL 23 / D23 GPIO23 , VSPI_MOSI 25 / D25 GPIO25 , ADC2_CH8 , DAC , I2S 26 / D26 GPIO26 , ADC2_CH9 , DAC , I2S 27 / D27 GPIO27 , ADC2_CH7 , TOUCH7 , I2S 32 / D32 GPIO32 , ADC1_CH4 , TOUCH9 33 / D33 GPIO33 , ADC1_CH5 , TOUCH8 34 / D34 GPI34 , ADC1_CH6 \u0441\u0430\u043c\u043e \u0446\u0438\u0444\u0440\u043e\u0432 \u0432\u0445\u043e\u0434 (\u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0445\u043e\u0434); \u043d\u044f\u043c\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 35 / D35 GPI35 , ADC1_CH7 \u0441\u0430\u043c\u043e \u0446\u0438\u0444\u0440\u043e\u0432 \u0432\u0445\u043e\u0434 (\u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0445\u043e\u0434); \u043d\u044f\u043c\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 36 / VP GPI36 , ADC1_CH0 \u0441\u0430\u043c\u043e \u0446\u0438\u0444\u0440\u043e\u0432 \u0432\u0445\u043e\u0434 (\u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0445\u043e\u0434); \u043d\u044f\u043c\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 39 / VN GPI39 , ADC1_CH3 \u0441\u0430\u043c\u043e \u0446\u0438\u0444\u0440\u043e\u0432 \u0432\u0445\u043e\u0434 (\u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0445\u043e\u0434); \u043d\u044f\u043c\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0439 \u0441\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u043d\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0439 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0439 \u0441 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 ,\u0432\u0438\u0436 \u0437\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0438 \u0421\u043d\u0438\u043c\u043a\u0430 GPIOs","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 GPIOs"},{"location":"gpio/#gpios_2","text":"\u041f\u0438\u043d\u043e\u0432\u0435 GPIO 0, 2, 4, 5, 12, 15 \u0443\u0447\u0430\u0441\u0442\u0432\u0430\u0442 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0430 \u043f\u043e \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u0438 \u0435 \u0432\u0430\u0436\u043d\u043e \u0432 \u043f\u044a\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u043d\u0438\u044f \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u0442\u0430 \u0438\u043c \u0434\u0430 \u0441\u0430 \u043a\u0430\u043a\u0442\u043e \u0441\u0430 \u043f\u043e\u0441\u043e\u0447\u0435\u043d\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0442\u0430 (\u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0441\u044a\u043e\u0431\u0440\u0430\u0437\u0438 \u0441\u0445\u0435\u043c\u0430\u0442\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 \u043a\u043e\u0433\u0430\u0442\u043e \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u043a\u0430\u0442\u043e \u0432\u0445\u043e\u0434\u043e\u0432\u0435)! \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u0435\u043d \u0441\u043b\u0443\u0447\u0430\u0439 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u043d\u044f\u043c\u0430 \u0434\u0430 \u0437\u0430\u043f\u043e\u0447\u043d\u0435 \u0434\u0430 \u0438\u0437\u043f\u044a\u043b\u043d\u044f\u0432\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430\u0442\u0430! \u041f\u0438\u043d\u043e\u0432\u0435 GPIO 0, 1, 3, 5, 14, 15 \u043f\u043e \u0432\u0440\u0435\u043c\u0435 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0432\u0430\u0442 \u0432\u044a\u0432 \u0432\u0438\u0441\u043e\u043a\u043e \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u043a\u043e\u0435\u0442\u043e \u043c\u043e\u0436\u0435 \u0434\u0430 \u0434\u043e\u0432\u0435\u0434\u0435 \u0434\u043e \u043d\u0435\u0436\u0435\u043b\u0430\u0442\u0435\u043b\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u043d\u0438 \u043c\u043e\u0434\u0443\u043b\u0438 (\u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0441\u044a\u043e\u0431\u0440\u0430\u0437\u0438 \u0441\u0445\u0435\u043c\u0430\u0442\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 \u043a\u043e\u0433\u0430\u0442\u043e \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u043a\u0430\u0442\u043e \u0438\u0437\u0445\u043e\u0434\u0438)! \u041f\u0438\u043d\u043e\u0432\u0435 GPIO 34, 35, 36, 39 \u043d\u0435 \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043a\u0430\u0442\u043e \u0438\u0437\u0445\u043e\u0434\u0438! \u041e\u0441\u0432\u0435\u043d \u0442\u043e\u0432\u0430 \u043d\u044f\u043c\u0430\u0442 \u0432\u044a\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442 \u0437\u0430 \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438 \u0440\u0435\u0437\u0438\u0441\u0442\u043e\u0440\u0438! \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u0438 \u0432\u0445\u043e\u0434\u043e\u0432\u0435 ADC1 ADC2 \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u0438\u0442\u0435 \u0432\u0445\u043e\u0434\u043e\u0432\u0435 \u043e\u0442 \u043c\u043e\u0434\u0443\u043b ADC2 (\u043e\u0442 ADC2_CH0 \u0434\u043e ADC2_CH9 ) \u043d\u0435 \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0440\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d WiFi \u043c\u043e\u0434\u0443\u043b! \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u0438\u0442\u0435 \u0432\u0445\u043e\u0434\u043e\u0432\u0435 \u043e\u0442 \u043c\u043e\u0434\u0443\u043b ADC1 \u0440\u0430\u0431\u043e\u0442\u044f\u0442 \u0432\u0438\u043d\u0430\u0433\u0438! \u041e\u0431\u0449\u043e \u0437\u0430 GPIO \u0412\u0441\u0438\u0447\u043a\u043e \u043f\u0438\u043d\u043e\u0432\u0435, \u043a\u043e\u0438\u0442\u043e \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043a\u0430\u0442\u043e \u0432\u0445\u043e\u0434\u043e\u0432\u0435, \u0438\u043c\u0430\u0442 \u0438 \u043f\u0440\u0435\u043a\u044a\u0441\u0432\u0430\u043d\u0438\u044f (\u043f\u0440\u043e\u043c\u044f\u043d\u0430 \u043d\u0430 \u043d\u0438\u0432\u043e \u0438\u043b\u0438 \u0444\u0440\u043e\u043d\u0442) \u0412\u0441\u0438\u0447\u043a\u0438 \u043f\u0438\u043d\u043e\u0432\u0435, \u043a\u043e\u0438\u0442\u043e \u043c\u043e\u0433\u0430\u0442 \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043a\u0430\u0442\u043e \u0438\u0437\u0445\u043e\u0434\u0438, \u0438\u043c\u0430\u0442 \u0438 PWM \u0444\u0443\u043d\u043a\u0446\u0438\u044f (\u0448\u0438\u0440\u043e\u0447\u0438\u043d\u043d\u043e-\u0438\u043c\u043f\u0443\u043b\u0441\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0430\u0446\u0438\u044f)","title":"\u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0438 \u043a\u044a\u043c GPIOs"},{"location":"ide-install/","text":"Arduino IDE + ESP32 Add-on \u0418\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 Arduino IDE \u0418\u043c\u0430 \u0432\u044a\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0438, \u0442\u0443\u043a \u043f\u0440\u043e\u0441\u043b\u0435\u0434\u044f\u0432\u0430\u043c\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0446\u0438\u044f\u0442\u0430 \u0437\u0430 Windows \u0438 Arduino IDE 1.8 . \u041c\u043e\u0436\u0435 \u0434\u0430 \u0438\u0437\u0442\u0435\u0433\u043b\u0438\u0442\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0442\u043e\u0440, \u0430\u0440\u0445\u0438\u0432 \u0438\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043d\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0437\u0430 Windows, \u0441\u044a\u0432\u0435\u0442\u044a\u0442 \u043d\u0438 \u0435 \u0438\u0437\u043e\u043b\u0437\u0432\u0430\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0442\u043e\u0440\u0430. \u0418\u0437\u0442\u0435\u0433\u043b\u0435\u0442\u0435 \u043d\u0430\u0439-\u043d\u043e\u0432\u0430\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430 Arduino IDE : \u0421\u043b\u0435\u0434\u0432\u0430\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438\u0442\u0435 \u043d\u0430 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0442\u043e\u0440\u0430, \u0430\u043a\u043e \u043d\u0435 \u0441\u0442\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430 Arduino IDE \u043d\u0430 \u0432\u0430\u0448\u0438\u044f\u0442 \u043a\u043e\u043c\u043f\u044e\u0442\u044a\u0440, \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0442\u043e\u0440\u044a\u0442 \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0432\u0430\u043d\u0435 \u0438 \u043d\u044f\u043a\u043e\u0438 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0438 \u0437\u0430 \u0430\u0440\u0434\u0443\u0438\u043d\u043e \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0438, \u0437\u0430\u043f\u0438\u0448\u0435\u0442\u0435 \u0433\u0438 \u043d\u0435 \u0441\u0430 \u0438\u0437\u043b\u0438\u0448\u043d\u0438. \u0421\u043a\u0440\u0438\u0439\u043d\u0448\u043e\u0442\u0438 \u0418\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 ESP32 Add-on \u043a\u044a\u043c Arduino IDE \u0421\u043b\u0435\u0434 \u043a\u0430\u0442\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u0442\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0440\u0430\u043b\u0438 \u043d\u0430\u0439-\u0430\u043a\u0442\u0443\u0430\u043b\u043d\u0430\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430 Arduino IDE \u0435 \u0432\u0440\u0435\u043c\u0435 \u0434\u0430 \u0437\u0430\u043f\u0438\u0448\u0435\u0442\u0435 \u0438 \u0434\u043e\u0431\u0430\u0432\u043a\u0430\u0442\u0430 \u0437\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 ESP32. \u0438\u0437\u0431\u0438\u0440\u0430\u043c\u0435 File>Preferences \u0438 \u0432 \u043f\u043e\u043b\u0435\u0442\u043e Additional Boards Manager URLs \u0432\u044a\u0432\u0435\u0436\u0434\u0430\u043c\u0435 \u0441\u043b\u0435\u0434\u043d\u0438\u044f \u043b\u0438\u043d\u043a \u0438 \u043f\u043e\u0442\u0432\u044a\u0440\u0436\u0434\u0430\u0432\u0430\u043c\u0435 \u0441 \u0431\u0443\u0442\u043e\u043d\u0430 [ \u041e\u041a ] Caution Arduino ESP32 core v2.x.x cannot be used on Windows 8.x x86 (32 bits), Windows 7 or earlier. The Windows 32 bits OS is no longer supported by this toolchain. The Arduino ESP32 v1.0.6 still works on WIN32. You might want to install python 3.8.x because it is the latest release supported by Windows 7. https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package _ esp32 _ dev _ index.json Preferences \u0438\u0437\u0431\u0438\u0440\u0430\u043c\u0435 Tools> Board: \"Arduino Uno\"> Boards Manager... , \u043a\u043e\u0435\u0442\u043e \u043d\u0438 \u043e\u0442\u0432\u0430\u0440\u044f \u043c\u0435\u043d\u0438\u0434\u0436\u044a\u0440\u0430 \u043d\u0430 \u0432\u044a\u0437\u043c\u043e\u0436\u043d\u0438\u0442\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0438, \u0432 \u043f\u043e\u043b\u0435\u0442\u043e \u0437\u0430 \u0442\u044a\u0440\u0441\u0435\u043d\u0435 \u0432\u044a\u0432\u0435\u0436\u0434\u0430\u043c\u0435 esp32 \u0438 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043c\u0435 \u043d\u0430\u0439-\u043d\u043e\u0432\u0430\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u044f Boards Manager \u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0438 K\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043d\u0430 Arduino IDE \u0417\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430, \u043a\u043e\u0439\u0442\u043e \u0435 \u043a\u044a\u043c \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u043a\u0430, \u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u044a\u0440\u0432\u043e \u0434\u0430 \u0441\u0435 \u0438\u0437\u0431\u0435\u0440\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b (Board: \"ESP32 Dev Module\") \u0438 \u0441\u043b\u0435\u0434 \u0442\u043e\u0432\u0430 \u0434\u0430 \u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0430\u0442 \u0441\u043b\u0435\u0434\u043d\u0438\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u0442 \u043c\u0435\u043d\u044e\u0442\u043e Tools : \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0421\u043d\u0438\u043c\u043a\u0430 Board: \"ESP32 Dev Module\" Upload Speed: \"921600\" CPU Frequency: \"240MHz (Wifi/BT)\" Flash Frequency: \"80 MHz\" Flash Mode: \"QIO\" Flash Size: \"4MB (32Mb)\" Partition Scheme: \"Default 4MB with spiffs (1.2MB App/1.5MB SPIFFS)\" Code Debug Level: \"None\" PSRAM: \"Disabled\" \u0421\u043b\u0435\u0434 \u043a\u0430\u0442\u043e \u0441\u0442\u0435 \u0433\u043e\u0442\u043e\u0432\u0438 \u0441 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0446\u0438\u044f\u0442\u0430, \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u0440\u0435\u043c\u0438\u043d\u0435\u0442\u0435 \u043a\u044a\u043c \u0434\u043e\u0431\u0430\u0432\u044f\u043d\u0435 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0420\u0435\u0441\u0443\u0440\u0441\u0438 docs.espressif.com/projects/arduino-esp32","title":"\u0418\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435 IDE"},{"location":"ide-install/#arduino-ide-esp32-add-on","text":"","title":"Arduino IDE + ESP32 Add-on"},{"location":"ide-install/#arduino-ide","text":"\u0418\u043c\u0430 \u0432\u044a\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0438, \u0442\u0443\u043a \u043f\u0440\u043e\u0441\u043b\u0435\u0434\u044f\u0432\u0430\u043c\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0446\u0438\u044f\u0442\u0430 \u0437\u0430 Windows \u0438 Arduino IDE 1.8 . \u041c\u043e\u0436\u0435 \u0434\u0430 \u0438\u0437\u0442\u0435\u0433\u043b\u0438\u0442\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0442\u043e\u0440, \u0430\u0440\u0445\u0438\u0432 \u0438\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043d\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0437\u0430 Windows, \u0441\u044a\u0432\u0435\u0442\u044a\u0442 \u043d\u0438 \u0435 \u0438\u0437\u043e\u043b\u0437\u0432\u0430\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0442\u043e\u0440\u0430. \u0418\u0437\u0442\u0435\u0433\u043b\u0435\u0442\u0435 \u043d\u0430\u0439-\u043d\u043e\u0432\u0430\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430 Arduino IDE : \u0421\u043b\u0435\u0434\u0432\u0430\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438\u0442\u0435 \u043d\u0430 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0442\u043e\u0440\u0430, \u0430\u043a\u043e \u043d\u0435 \u0441\u0442\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430 Arduino IDE \u043d\u0430 \u0432\u0430\u0448\u0438\u044f\u0442 \u043a\u043e\u043c\u043f\u044e\u0442\u044a\u0440, \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0442\u043e\u0440\u044a\u0442 \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0432\u0430\u043d\u0435 \u0438 \u043d\u044f\u043a\u043e\u0438 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0438 \u0437\u0430 \u0430\u0440\u0434\u0443\u0438\u043d\u043e \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0438, \u0437\u0430\u043f\u0438\u0448\u0435\u0442\u0435 \u0433\u0438 \u043d\u0435 \u0441\u0430 \u0438\u0437\u043b\u0438\u0448\u043d\u0438. \u0421\u043a\u0440\u0438\u0439\u043d\u0448\u043e\u0442\u0438","title":"\u0418\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 Arduino IDE"},{"location":"ide-install/#esp32-add-on-arduino-ide","text":"\u0421\u043b\u0435\u0434 \u043a\u0430\u0442\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u0442\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0440\u0430\u043b\u0438 \u043d\u0430\u0439-\u0430\u043a\u0442\u0443\u0430\u043b\u043d\u0430\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u044f \u043d\u0430 Arduino IDE \u0435 \u0432\u0440\u0435\u043c\u0435 \u0434\u0430 \u0437\u0430\u043f\u0438\u0448\u0435\u0442\u0435 \u0438 \u0434\u043e\u0431\u0430\u0432\u043a\u0430\u0442\u0430 \u0437\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 ESP32. \u0438\u0437\u0431\u0438\u0440\u0430\u043c\u0435 File>Preferences \u0438 \u0432 \u043f\u043e\u043b\u0435\u0442\u043e Additional Boards Manager URLs \u0432\u044a\u0432\u0435\u0436\u0434\u0430\u043c\u0435 \u0441\u043b\u0435\u0434\u043d\u0438\u044f \u043b\u0438\u043d\u043a \u0438 \u043f\u043e\u0442\u0432\u044a\u0440\u0436\u0434\u0430\u0432\u0430\u043c\u0435 \u0441 \u0431\u0443\u0442\u043e\u043d\u0430 [ \u041e\u041a ] Caution Arduino ESP32 core v2.x.x cannot be used on Windows 8.x x86 (32 bits), Windows 7 or earlier. The Windows 32 bits OS is no longer supported by this toolchain. The Arduino ESP32 v1.0.6 still works on WIN32. You might want to install python 3.8.x because it is the latest release supported by Windows 7. https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package _ esp32 _ dev _ index.json Preferences \u0438\u0437\u0431\u0438\u0440\u0430\u043c\u0435 Tools> Board: \"Arduino Uno\"> Boards Manager... , \u043a\u043e\u0435\u0442\u043e \u043d\u0438 \u043e\u0442\u0432\u0430\u0440\u044f \u043c\u0435\u043d\u0438\u0434\u0436\u044a\u0440\u0430 \u043d\u0430 \u0432\u044a\u0437\u043c\u043e\u0436\u043d\u0438\u0442\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0438, \u0432 \u043f\u043e\u043b\u0435\u0442\u043e \u0437\u0430 \u0442\u044a\u0440\u0441\u0435\u043d\u0435 \u0432\u044a\u0432\u0435\u0436\u0434\u0430\u043c\u0435 esp32 \u0438 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043c\u0435 \u043d\u0430\u0439-\u043d\u043e\u0432\u0430\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u044f Boards Manager","title":"\u0418\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 ESP32 Add-on \u043a\u044a\u043c Arduino IDE"},{"location":"ide-install/#_1","text":"K\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043d\u0430 Arduino IDE \u0417\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430, \u043a\u043e\u0439\u0442\u043e \u0435 \u043a\u044a\u043c \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u043a\u0430, \u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u044a\u0440\u0432\u043e \u0434\u0430 \u0441\u0435 \u0438\u0437\u0431\u0435\u0440\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b (Board: \"ESP32 Dev Module\") \u0438 \u0441\u043b\u0435\u0434 \u0442\u043e\u0432\u0430 \u0434\u0430 \u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0430\u0442 \u0441\u043b\u0435\u0434\u043d\u0438\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u0442 \u043c\u0435\u043d\u044e\u0442\u043e Tools : \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0421\u043d\u0438\u043c\u043a\u0430 Board: \"ESP32 Dev Module\" Upload Speed: \"921600\" CPU Frequency: \"240MHz (Wifi/BT)\" Flash Frequency: \"80 MHz\" Flash Mode: \"QIO\" Flash Size: \"4MB (32Mb)\" Partition Scheme: \"Default 4MB with spiffs (1.2MB App/1.5MB SPIFFS)\" Code Debug Level: \"None\" PSRAM: \"Disabled\" \u0421\u043b\u0435\u0434 \u043a\u0430\u0442\u043e \u0441\u0442\u0435 \u0433\u043e\u0442\u043e\u0432\u0438 \u0441 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0446\u0438\u044f\u0442\u0430, \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u0440\u0435\u043c\u0438\u043d\u0435\u0442\u0435 \u043a\u044a\u043c \u0434\u043e\u0431\u0430\u0432\u044f\u043d\u0435 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","title":"\u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0438"},{"location":"ide-install/#_2","text":"docs.espressif.com/projects/arduino-esp32","title":"\u0420\u0435\u0441\u0443\u0440\u0441\u0438"},{"location":"index__/","text":"\u0414\u043e\u0431\u0440\u0435 \u0434\u043e\u0448\u043b\u0438! \u0422\u0443\u043a \u0449\u0435 \u043d\u0430\u043c\u0435\u0440\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0437\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 ESP32-101-board \u0431\u0430\u0437\u0438\u0440\u0430\u043d\u0430 \u043d\u0430 \u0441\u044a\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0438\u044f \u0438 \u0448\u0438\u0440\u043e\u043a\u043e \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d \u043c\u0438\u043a\u0440\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 ESP32 \u043d\u0430 \u0444\u0438\u0440\u043c\u0430\u0442\u0430 Espressif . \u0422\u043e\u0432\u0430 \u0435 \u0448\u0438\u0440\u043e\u043a\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u0435\u043d \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0432 \u0441\u0444\u0435\u0440\u0430\u0442\u0430 \u043d\u0430 DIY \u0438 IoT \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0442\u0435. \u0414\u0432\u0443\u044f\u0434\u0440\u0435\u043d \u043c\u0438\u043a\u0440\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440 \u0441\u044a\u0441 WiFi \u0438 Bluetooth LE 5.0 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0432\u0430\u0449\u0438 \u043f\u043e-\u0433\u043e\u043b\u044f\u043c\u0430 \u0433\u044a\u0432\u043a\u0430\u0432\u043e\u0441\u0442 \u043f\u0440\u0438 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438\u0442\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u0441\u044a\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0438\u044f \u0441\u0432\u044f\u0442. \u0428\u0438\u0440\u043e\u043a\u043e\u0442\u043e \u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u0441\u0444\u0435\u0440\u0430\u0442\u0430 \u043d\u0430 \u043b\u044e\u0431\u0438\u0442\u0435\u043b\u0438\u0442\u0435 \u0441\u0435 \u0434\u044a\u043b\u0436\u0438 \u043d\u0430 \u0442\u043e\u0432\u0430, \u0447\u0435 \u0442\u043e\u0437\u0438 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0441\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430 \u0447\u0440\u0435\u0437 \u0432\u0435\u0447\u0435 \u043f\u043e\u0437\u043d\u0430\u0442\u0430\u0442\u0430 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e \u0445\u043e\u0440\u0430 \u0441\u0440\u0435\u0434\u0430 \u0437\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430\u043d\u0435 Arduino IDE \u0441\u0430\u043c\u043e \u0441 \u0434\u043e\u0431\u0430\u0432\u044f\u043d\u0442\u043e \u043d\u0430 \u0435\u0434\u0438\u043d \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u043d Add-on . \u041f\u043e\u0440\u0430\u0434\u0438 \u0442\u043e\u0432\u0430 \u0447\u0435 Arduino IDE \u043d\u0435 \u0435 native \u0441\u0440\u0435\u0434\u0430\u0442\u0430 \u0437\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u0438\u043c\u0430 \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u0438 \u043a\u0430\u043c\u044a\u043d\u0438 \u043d\u0430, \u043a\u043e\u0438\u0442\u043e \u0447\u043e\u0432\u0435\u043a \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u043f\u0430\u0434\u043d\u0435. \u0415\u0442\u043e \u0437\u0430\u0449\u043e \u043d\u0438\u0435 \u043e\u0442 VB- electronics \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0438\u0445\u043c\u0435 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u0442\u0430 \u043d\u0430 \u043a\u043e\u044f\u0442\u043e \u0434\u0430 \u0441\u0435 \u0440\u0430\u0437\u0433\u043b\u0435\u0434\u0430\u0442 \u0438 \u043e\u043f\u0438\u0448\u0430\u0442, \u0441 \u043d\u0430\u0433\u043b\u0435\u0434\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0442\u043e\u0437\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0447\u0440\u0435\u0437 \u0410\u0440\u0434\u0443\u0438\u043d\u043e \u0441\u0440\u0435\u0434\u0430\u0442\u0430. \u0420\u0430\u0437\u0431\u0438\u0440\u0430 \u0441\u0435, \u0437\u0430 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0432\u044a\u0437\u043d\u043e\u0436\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0435\u043b\u0430\u0440\u0430 \u0435 \u043d\u0443\u0436\u043d\u0430 \u0438 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u044f, \u0435\u0442\u043e \u0442\u0443\u043a \u0438\u0434\u0432\u0430 \u0438 \u043f\u043e\u043b\u0437\u0430\u0442\u0430 \u043d\u0430 ESP32-101-board \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \" \u0430\u0443\u0442 \u044a\u0444 \u0434\u0430 \u0431\u043e\u043a\u0441 \", \u0431\u0435\u0437 \u043d\u0443\u0436\u0434\u0430 \u043e\u0442 \u0431\u0440\u0435\u0434\u0431\u043e\u0440\u0434 \u0438 \u0434\u043e\u0441\u0430\u0434\u043d\u0438 \u043a\u0430\u0431\u0435\u043b\u0438. Powered by VB-electronics","title":"Index  "},{"location":"index__/#_1","text":"\u0422\u0443\u043a \u0449\u0435 \u043d\u0430\u043c\u0435\u0440\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0437\u0430 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 ESP32-101-board \u0431\u0430\u0437\u0438\u0440\u0430\u043d\u0430 \u043d\u0430 \u0441\u044a\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0438\u044f \u0438 \u0448\u0438\u0440\u043e\u043a\u043e \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d \u043c\u0438\u043a\u0440\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 ESP32 \u043d\u0430 \u0444\u0438\u0440\u043c\u0430\u0442\u0430 Espressif . \u0422\u043e\u0432\u0430 \u0435 \u0448\u0438\u0440\u043e\u043a\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u0435\u043d \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0432 \u0441\u0444\u0435\u0440\u0430\u0442\u0430 \u043d\u0430 DIY \u0438 IoT \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0442\u0435. \u0414\u0432\u0443\u044f\u0434\u0440\u0435\u043d \u043c\u0438\u043a\u0440\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440 \u0441\u044a\u0441 WiFi \u0438 Bluetooth LE 5.0 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0432\u0430\u0449\u0438 \u043f\u043e-\u0433\u043e\u043b\u044f\u043c\u0430 \u0433\u044a\u0432\u043a\u0430\u0432\u043e\u0441\u0442 \u043f\u0440\u0438 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438\u0442\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u0441\u044a\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0438\u044f \u0441\u0432\u044f\u0442. \u0428\u0438\u0440\u043e\u043a\u043e\u0442\u043e \u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u0441\u0444\u0435\u0440\u0430\u0442\u0430 \u043d\u0430 \u043b\u044e\u0431\u0438\u0442\u0435\u043b\u0438\u0442\u0435 \u0441\u0435 \u0434\u044a\u043b\u0436\u0438 \u043d\u0430 \u0442\u043e\u0432\u0430, \u0447\u0435 \u0442\u043e\u0437\u0438 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0441\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430 \u0447\u0440\u0435\u0437 \u0432\u0435\u0447\u0435 \u043f\u043e\u0437\u043d\u0430\u0442\u0430\u0442\u0430 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e \u0445\u043e\u0440\u0430 \u0441\u0440\u0435\u0434\u0430 \u0437\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430\u043d\u0435 Arduino IDE \u0441\u0430\u043c\u043e \u0441 \u0434\u043e\u0431\u0430\u0432\u044f\u043d\u0442\u043e \u043d\u0430 \u0435\u0434\u0438\u043d \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u043d Add-on . \u041f\u043e\u0440\u0430\u0434\u0438 \u0442\u043e\u0432\u0430 \u0447\u0435 Arduino IDE \u043d\u0435 \u0435 native \u0441\u0440\u0435\u0434\u0430\u0442\u0430 \u0437\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440\u0430 \u0438\u043c\u0430 \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u0438 \u043a\u0430\u043c\u044a\u043d\u0438 \u043d\u0430, \u043a\u043e\u0438\u0442\u043e \u0447\u043e\u0432\u0435\u043a \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u043f\u0430\u0434\u043d\u0435. \u0415\u0442\u043e \u0437\u0430\u0449\u043e \u043d\u0438\u0435 \u043e\u0442 VB- electronics \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0438\u0445\u043c\u0435 \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u0442\u0430 \u043d\u0430 \u043a\u043e\u044f\u0442\u043e \u0434\u0430 \u0441\u0435 \u0440\u0430\u0437\u0433\u043b\u0435\u0434\u0430\u0442 \u0438 \u043e\u043f\u0438\u0448\u0430\u0442, \u0441 \u043d\u0430\u0433\u043b\u0435\u0434\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0442\u043e\u0437\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u0440 \u0447\u0440\u0435\u0437 \u0410\u0440\u0434\u0443\u0438\u043d\u043e \u0441\u0440\u0435\u0434\u0430\u0442\u0430. \u0420\u0430\u0437\u0431\u0438\u0440\u0430 \u0441\u0435, \u0437\u0430 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0442 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0432\u044a\u0437\u043d\u043e\u0436\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0435\u043b\u0430\u0440\u0430 \u0435 \u043d\u0443\u0436\u043d\u0430 \u0438 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u044f, \u0435\u0442\u043e \u0442\u0443\u043a \u0438\u0434\u0432\u0430 \u0438 \u043f\u043e\u043b\u0437\u0430\u0442\u0430 \u043d\u0430 ESP32-101-board \u0440\u0430\u0437\u0432\u043e\u0439\u043d\u0430 \u043f\u043b\u0430\u0442\u043a\u0430 \" \u0430\u0443\u0442 \u044a\u0444 \u0434\u0430 \u0431\u043e\u043a\u0441 \", \u0431\u0435\u0437 \u043d\u0443\u0436\u0434\u0430 \u043e\u0442 \u0431\u0440\u0435\u0434\u0431\u043e\u0440\u0434 \u0438 \u0434\u043e\u0441\u0430\u0434\u043d\u0438 \u043a\u0430\u0431\u0435\u043b\u0438. Powered by VB-electronics","title":"\u0414\u043e\u0431\u0440\u0435 \u0434\u043e\u0448\u043b\u0438!"},{"location":"libraries-onboard/","text":"Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. 1 . I'm an annotation! I can contain code , formatted text , images, ... basically anything that can be expressed in Markdown. Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation!","title":"\u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u0432 101-board"},{"location":"libraries/","text":"\u041c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\u0442\u0435 \u0412\u0433\u0440\u0430\u0434\u0435\u043d\u0438 ESP32 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0414\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\u0442\u0435, \u043a\u043e\u0438\u0442\u043e \u0438\u0434\u0432\u0430\u0442 \u0441 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435\u0442\u043e \u043d\u0430 addon-a \u0437\u0430 ESP32 \u0441\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u0430 \u043f\u043e \u0442\u043e\u0437\u0438 \u043f\u044a\u0442: C:\\Users\\UserName\\AppData\\Local\\Arduino\\packages\\esp32\\hardware\\esp32\\2.0.2\\libraries . \u041a\u0440\u0430\u0442\u043a\u0438\u044f\u0442 \u043f\u044a\u0442 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0432\u0430\u0440\u0438\u0440\u0430, \u043d\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u0442\u0430 \u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u0430 \u043d\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u0430\u0442\u0430 \u043f\u043e-\u0434\u043e\u043b\u0443. \u0418\u043c\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0432\u0438\u0434, \u0447\u0435 \u043f\u0430\u043f\u043a\u0430\u0442\u0430 AppData \u043d\u0435 \u0441\u0435 \u0432\u0438\u0436\u0434\u0430 \u0432\u044a\u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0438\u044f \u043c\u0435\u043d\u0438\u0434\u0436\u044a\u0440, \u0437\u0430\u0442\u043e\u0432\u0430 \u0432\u044a\u0432\u0435\u0434\u0435\u0442\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043d\u043e \u0432 \u0430\u0434\u0440\u0435\u0441\u043d\u0430\u0442\u0430 \u043b\u0435\u043d\u0442\u0430 C:\\Users\\YourUserName\\AppData . C:\\Users |---\\UserName |---|---\\AppData |---|---|---\\Local |---|---|---|---\\Arduino Folder |---|---|---|---|---\\packages |---|---|---|---|---|---\\esp32 |---|---|---|---|---|---|---\\hardware |---|---|---|---|---|---|---|---\\esp32 |---|---|---|---|---|---|---|---|---\\2.0.2 (addon version) |---|---|---|---|---|---|---|---|---|---\\libraries \u0412\u0433\u0440\u0430\u0434\u0435\u043d\u0438 Arduino \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043d\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\u0442\u0435, \u043a\u043e\u0438\u0442\u043e \u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0432\u0430\u0442 \u043e\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f \u0441\u0430 \u0440\u0430\u0437\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e \u043c\u044f\u0441\u0442\u043e \u043e\u0442 \u0432\u0433\u0440\u0430\u0434\u0435\u043d\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0418\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0437 Library Manager \u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0446\u0438\u044f \u043e\u0442 zip \u0438\u0437\u0442\u0440\u0438\u0432\u0430\u043d\u0435","title":"\u0418\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"libraries/#_1","text":"","title":"\u041c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\u0442\u0435"},{"location":"libraries/#esp32","text":"\u0414\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\u0442\u0435, \u043a\u043e\u0438\u0442\u043e \u0438\u0434\u0432\u0430\u0442 \u0441 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435\u0442\u043e \u043d\u0430 addon-a \u0437\u0430 ESP32 \u0441\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u0430 \u043f\u043e \u0442\u043e\u0437\u0438 \u043f\u044a\u0442: C:\\Users\\UserName\\AppData\\Local\\Arduino\\packages\\esp32\\hardware\\esp32\\2.0.2\\libraries . \u041a\u0440\u0430\u0442\u043a\u0438\u044f\u0442 \u043f\u044a\u0442 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0432\u0430\u0440\u0438\u0440\u0430, \u043d\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u0442\u0430 \u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u0430 \u043d\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u0430\u0442\u0430 \u043f\u043e-\u0434\u043e\u043b\u0443. \u0418\u043c\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0432\u0438\u0434, \u0447\u0435 \u043f\u0430\u043f\u043a\u0430\u0442\u0430 AppData \u043d\u0435 \u0441\u0435 \u0432\u0438\u0436\u0434\u0430 \u0432\u044a\u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0438\u044f \u043c\u0435\u043d\u0438\u0434\u0436\u044a\u0440, \u0437\u0430\u0442\u043e\u0432\u0430 \u0432\u044a\u0432\u0435\u0434\u0435\u0442\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043d\u043e \u0432 \u0430\u0434\u0440\u0435\u0441\u043d\u0430\u0442\u0430 \u043b\u0435\u043d\u0442\u0430 C:\\Users\\YourUserName\\AppData . C:\\Users |---\\UserName |---|---\\AppData |---|---|---\\Local |---|---|---|---\\Arduino Folder |---|---|---|---|---\\packages |---|---|---|---|---|---\\esp32 |---|---|---|---|---|---|---\\hardware |---|---|---|---|---|---|---|---\\esp32 |---|---|---|---|---|---|---|---|---\\2.0.2 (addon version) |---|---|---|---|---|---|---|---|---|---\\libraries","title":"\u0412\u0433\u0440\u0430\u0434\u0435\u043d\u0438 ESP32 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"libraries/#arduino","text":"","title":"\u0412\u0433\u0440\u0430\u0434\u0435\u043d\u0438 Arduino \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"libraries/#_2","text":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\u0442\u0435, \u043a\u043e\u0438\u0442\u043e \u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0432\u0430\u0442 \u043e\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f \u0441\u0430 \u0440\u0430\u0437\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e \u043c\u044f\u0441\u0442\u043e \u043e\u0442 \u0432\u0433\u0440\u0430\u0434\u0435\u043d\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","title":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043d\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f"},{"location":"libraries/#_3","text":"","title":"\u0418\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430\u043d\u0435"},{"location":"libraries/#library-manager","text":"","title":"\u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0437 Library Manager"},{"location":"libraries/#zip","text":"","title":"\u0438\u043d\u0441\u0442\u0430\u043b\u0430\u0446\u0438\u044f \u043e\u0442 zip"},{"location":"libraries/#_4","text":"","title":"\u0438\u0437\u0442\u0440\u0438\u0432\u0430\u043d\u0435"},{"location":"Notes/ESP32-ADC/ESP32-ADC/","text":"Use of ADCs in ESP32 Arduino core Main information is from official docs attenuation of Measured input voltage Vref is the reference voltage used internally by ESP32 ADCs for measuring the input voltage. The ESP32 ADCs can measure analog voltages from 0 V to Vref. Among different chips, the Vref varies, the median is 1.1 V. In order to convert voltages larger than Vref, input voltages can be attenuated before being input to the ADCs. The median of Vref is 1.1 V with 0 db attenuation(gain), most of the chips comes with factory calibrated ADC_cal values to check the Vref of your Chip verify if eFuse Vref is present by running the espefuse.py tool with adc_info parameter in CMD: ~/esptool_py/esptool/espefuse.py --port \"PORTNAME\" adc_info example return: ADC VRef calibration: 1093 mV There are 4 available attenuation options, the higher the attenuation is, the higher the measurable input voltage could be. You can change the attenuation (negative gain) of input voltage with analogSetAttenuation(val) ADC_ATTEN_DB_0 = 1 x Vref ADC_ATTEN_DB_2_5 = 1.33 x Vref ADC_ATTEN_DB_6 = 1.99 x Vref ADC_ATTEN_DB_11 = 3.54 x Vref There is an online converter Decibels to Voltage Gain/Loss default values for ADC config default ADC resolution = 12 bit default Attenuation - 11 db Code functions For full available code functions check the core library: C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.4\\cores\\esp32\\esp32-hal-adc.c C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.4\\cores\\esp32\\esp32-hal-adc.h Here are listed sopme of tha basics functions: analogReadResolution(resolution) : set the sample bits and resolution. It can be a value between 9 (0 \u2013 511) and 12 bits (0 \u2013 4095). Default is 12-bit resolution. analogSetWidth(width) : set the sample bits and resolution. It can be a value between 9 (0 \u2013 511) and 12 bits (0 \u2013 4095). Default is 12-bit resolution. analogSetCycles(cycles) : set the number of cycles per sample. Default is 8. Range: 1 to 255. analogSetSamples(samples) : set the number of samples in the range. Default is 1 sample. It has an effect of increasing sensitivity. analogSetClockDiv(attenuation) : set the divider for the ADC clock. Default is 1. Range: 1 to 255. analogSetAttenuation(attenuation) : sets the input attenuation for all ADC pins. Default is ADC_11db. Accepted values: ADC_0db: sets no attenuation. ADC can measure up to approximately 800 mV (1V input = ADC reading of 1088). ADC_2_5db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 1100 mV. (1V input = ADC reading of 3722). ADC_6db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 1350 mV. (1V input = ADC reading of 3033). ADC_11db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 2600 mV. (1V input = ADC reading of 1575). analogSetPinAttenuation(pin, attenuation) : sets the input attenuation for the specified pin. The default is ADC_11db. Attenuation values are the same from previous function. adcAttachPin(pin) : Attach a pin to ADC (also clears any other analog mode that could be on). Returns TRUE or FALSE result. adcStart(pin) , adcBusy(pin) and resultadcEnd(pin) : starts an ADC convertion on attached pin\u2019s bus. Check if conversion on the pin\u2019s ADC bus is currently running (returns TRUE or FALSE). Get the result of the conversion: returns 16-bit integer.","title":"ESP32_ADC"},{"location":"Notes/ESP32-ADC/ESP32-ADC/#use-of-adcs-in-esp32-arduino-core","text":"Main information is from official docs","title":"Use of ADCs in ESP32 Arduino core"},{"location":"Notes/ESP32-ADC/ESP32-ADC/#attenuation-of-measured-input-voltage","text":"Vref is the reference voltage used internally by ESP32 ADCs for measuring the input voltage. The ESP32 ADCs can measure analog voltages from 0 V to Vref. Among different chips, the Vref varies, the median is 1.1 V. In order to convert voltages larger than Vref, input voltages can be attenuated before being input to the ADCs. The median of Vref is 1.1 V with 0 db attenuation(gain), most of the chips comes with factory calibrated ADC_cal values to check the Vref of your Chip verify if eFuse Vref is present by running the espefuse.py tool with adc_info parameter in CMD: ~/esptool_py/esptool/espefuse.py --port \"PORTNAME\" adc_info example return: ADC VRef calibration: 1093 mV There are 4 available attenuation options, the higher the attenuation is, the higher the measurable input voltage could be. You can change the attenuation (negative gain) of input voltage with analogSetAttenuation(val) ADC_ATTEN_DB_0 = 1 x Vref ADC_ATTEN_DB_2_5 = 1.33 x Vref ADC_ATTEN_DB_6 = 1.99 x Vref ADC_ATTEN_DB_11 = 3.54 x Vref There is an online converter Decibels to Voltage Gain/Loss","title":"attenuation of Measured input voltage"},{"location":"Notes/ESP32-ADC/ESP32-ADC/#default-values-for-adc-config","text":"default ADC resolution = 12 bit default Attenuation - 11 db","title":"default values for ADC config"},{"location":"Notes/ESP32-ADC/ESP32-ADC/#code-functions","text":"For full available code functions check the core library: C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.4\\cores\\esp32\\esp32-hal-adc.c C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.4\\cores\\esp32\\esp32-hal-adc.h Here are listed sopme of tha basics functions: analogReadResolution(resolution) : set the sample bits and resolution. It can be a value between 9 (0 \u2013 511) and 12 bits (0 \u2013 4095). Default is 12-bit resolution. analogSetWidth(width) : set the sample bits and resolution. It can be a value between 9 (0 \u2013 511) and 12 bits (0 \u2013 4095). Default is 12-bit resolution. analogSetCycles(cycles) : set the number of cycles per sample. Default is 8. Range: 1 to 255. analogSetSamples(samples) : set the number of samples in the range. Default is 1 sample. It has an effect of increasing sensitivity. analogSetClockDiv(attenuation) : set the divider for the ADC clock. Default is 1. Range: 1 to 255. analogSetAttenuation(attenuation) : sets the input attenuation for all ADC pins. Default is ADC_11db. Accepted values: ADC_0db: sets no attenuation. ADC can measure up to approximately 800 mV (1V input = ADC reading of 1088). ADC_2_5db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 1100 mV. (1V input = ADC reading of 3722). ADC_6db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 1350 mV. (1V input = ADC reading of 3033). ADC_11db: The input voltage of ADC will be attenuated, extending the range of measurement to up to approx. 2600 mV. (1V input = ADC reading of 1575). analogSetPinAttenuation(pin, attenuation) : sets the input attenuation for the specified pin. The default is ADC_11db. Attenuation values are the same from previous function. adcAttachPin(pin) : Attach a pin to ADC (also clears any other analog mode that could be on). Returns TRUE or FALSE result. adcStart(pin) , adcBusy(pin) and resultadcEnd(pin) : starts an ADC convertion on attached pin\u2019s bus. Check if conversion on the pin\u2019s ADC bus is currently running (returns TRUE or FALSE). Get the result of the conversion: returns 16-bit integer.","title":"Code functions"},{"location":"Notes/ESP32-DAC/ESP32-DAC/","text":"ESP32-DAC DAC Digital-Analog-Convertor available on GPIO25 and GPIO26 Difference beteween DAC and PWM ESP32 has two 8-bit DAC (digital to analog converter) channels, connected to GPIO25 (Channel 1) and GPIO26 (Channel 2). The DAC driver allows these channels to be set to arbitrary voltages. The DAC channels can also be driven with DMA-style written sample data by the digital controller, via the I2S driver when using the \u201cbuilt-in DAC mode\u201d. arduino ESP32 core Voltage reference from the VDD3P3_RTC pin wich is typicaly 3.3V Setting DAC channel 1 (GPIO25) voltage to approx 0.78 of VDD3P3_RTC voltage (VDD * 200 / 255). For VDD3P3_RTC 3.3V, this is 2.59V: $$ Vout = 3.3*(desired 8 bit value/ 255) $$ dacWrite ( uint8_t pin , uint8_t value ) pin = GPIO25 or GPIO26 value = 0-255 void setup (){ pinMode ( 25 , ANALOG ); } void loop (){ dacWrite ( 25 , 116 ); }","title":"ESP32-DAC"},{"location":"Notes/ESP32-DAC/ESP32-DAC/#esp32-dac","text":"","title":"ESP32-DAC"},{"location":"Notes/ESP32-DAC/ESP32-DAC/#dac-digital-analog-convertor","text":"available on GPIO25 and GPIO26","title":"DAC Digital-Analog-Convertor"},{"location":"Notes/ESP32-DAC/ESP32-DAC/#difference-beteween-dac-and-pwm","text":"ESP32 has two 8-bit DAC (digital to analog converter) channels, connected to GPIO25 (Channel 1) and GPIO26 (Channel 2). The DAC driver allows these channels to be set to arbitrary voltages. The DAC channels can also be driven with DMA-style written sample data by the digital controller, via the I2S driver when using the \u201cbuilt-in DAC mode\u201d.","title":"Difference beteween DAC and PWM"},{"location":"Notes/ESP32-DAC/ESP32-DAC/#arduino-esp32-core","text":"Voltage reference from the VDD3P3_RTC pin wich is typicaly 3.3V Setting DAC channel 1 (GPIO25) voltage to approx 0.78 of VDD3P3_RTC voltage (VDD * 200 / 255). For VDD3P3_RTC 3.3V, this is 2.59V: $$ Vout = 3.3*(desired 8 bit value/ 255) $$ dacWrite ( uint8_t pin , uint8_t value ) pin = GPIO25 or GPIO26 value = 0-255 void setup (){ pinMode ( 25 , ANALOG ); } void loop (){ dacWrite ( 25 , 116 ); }","title":"arduino ESP32 core"},{"location":"Notes/ESP32-HAL/ESP32-HAL/","text":"ESP32-HALL sensor O\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0438\u043d\u043e\u0432\u0435 GPIO36 \u0438 GPIO39 , \u043a\u043e\u0438\u0442\u043e \u0441\u0430 \u0447\u0430\u0441\u0442 \u043e\u0442 ADC1 , \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e ADC_channel_0 \u0438 ADC_channel_3 . \u041a\u043e\u0433\u0430\u0442\u043e \u0438\u0437\u043f\u043e\u0437\u0432\u0430\u0442\u0435 \u0434\u0430\u0442\u0447\u0438\u043a\u044a\u0442 \u043d\u0430 \u0445\u043e\u043b \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0430\u0439\u0442\u0435 \u0432\u0445\u043e\u0434\u043d\u0438\u0442\u0435 \u0441\u0438\u0433\u043d\u0430\u043b\u0438 \u043d\u0430 \u0442\u0435\u0437\u0438 \u043f\u0438\u043d\u043e\u0432\u0435 \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 Hall Effect Applications Hall effect sensors are activated by a magnetic field and in many applications the device can be operated by a single permanent magnet attached to a moving shaft or device. There are many different types of magnet movements, such as \u201cHead-on\u201d, \u201cSideways\u201d, \u201cPush-pull\u201d or \u201cPush-push\u201d etc sensing movements. Which every type of configuration is used, to ensure maximum sensitivity the magnetic lines of flux must always be perpendicular to the sensing area of the device and must be of the correct polarity. This head-on positional detector will be \u201cOFF\u201d when there is no magnetic field present, (0 gauss). When the permanent magnets south pole (positive gauss) is moved perpendicular towards the active area of the Hall effect sensor the device turns \u201cON\u201d and lights the LED. Once switched \u201cON\u201d the Hall effect sensor stays \u201cON\u201d. To turn the device and therefore the LED \u201cOFF\u201d the magnetic field must be reduced to below the release point for unipolar sensors or exposed to a magnetic north pole (negative gauss) for bipolar sensors. The LED can be replaced with a larger power transistor if the output of the Hall Effect Sensor is required to switch larger current loads.","title":"ESP32-HAL"},{"location":"Notes/ESP32-HAL/ESP32-HAL/#esp32-hall-sensor","text":"","title":"ESP32-HALL sensor"},{"location":"Notes/ESP32-HAL/ESP32-HAL/#o","text":"\u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0438\u043d\u043e\u0432\u0435 GPIO36 \u0438 GPIO39 , \u043a\u043e\u0438\u0442\u043e \u0441\u0430 \u0447\u0430\u0441\u0442 \u043e\u0442 ADC1 , \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e ADC_channel_0 \u0438 ADC_channel_3 . \u041a\u043e\u0433\u0430\u0442\u043e \u0438\u0437\u043f\u043e\u0437\u0432\u0430\u0442\u0435 \u0434\u0430\u0442\u0447\u0438\u043a\u044a\u0442 \u043d\u0430 \u0445\u043e\u043b \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0430\u0439\u0442\u0435 \u0432\u0445\u043e\u0434\u043d\u0438\u0442\u0435 \u0441\u0438\u0433\u043d\u0430\u043b\u0438 \u043d\u0430 \u0442\u0435\u0437\u0438 \u043f\u0438\u043d\u043e\u0432\u0435","title":"O\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Notes/ESP32-HAL/ESP32-HAL/#_1","text":"Hall Effect Applications Hall effect sensors are activated by a magnetic field and in many applications the device can be operated by a single permanent magnet attached to a moving shaft or device. There are many different types of magnet movements, such as \u201cHead-on\u201d, \u201cSideways\u201d, \u201cPush-pull\u201d or \u201cPush-push\u201d etc sensing movements. Which every type of configuration is used, to ensure maximum sensitivity the magnetic lines of flux must always be perpendicular to the sensing area of the device and must be of the correct polarity. This head-on positional detector will be \u201cOFF\u201d when there is no magnetic field present, (0 gauss). When the permanent magnets south pole (positive gauss) is moved perpendicular towards the active area of the Hall effect sensor the device turns \u201cON\u201d and lights the LED. Once switched \u201cON\u201d the Hall effect sensor stays \u201cON\u201d. To turn the device and therefore the LED \u201cOFF\u201d the magnetic field must be reduced to below the release point for unipolar sensors or exposed to a magnetic north pole (negative gauss) for bipolar sensors. The LED can be replaced with a larger power transistor if the output of the Hall Effect Sensor is required to switch larger current loads.","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/","text":"ESP32-IDF LED Controller with 16 channels 8 channels in high speed mode 8 channels in low speed mode LEDC channels are divided into two groups of 8 channels each. One group of LEDC channels operates in high speed mode. This mode is implemented in hardware and offers automatic and glitch-free changing of the PWM duty cycle. The other group of channels operate in low speed mode, the PWM duty cycle must be changed by the driver in software. Setting up a channel of the LEDC in either high or low speed mode is done in three steps: Timer Configuration by specifying the PWM signal\u2019s frequency and duty cycle resolution. Channel Configuration by associating it with the timer and GPIO to output the PWM signal. Change PWM Signal that drives the output in order to change LED\u2019s intensity. This can be done under the full control of software or with hardware fading functions. 1. Timer Configuration The frequency and the duty resolution are interdependent. The higher the PWM frequency, the lower the duty resolution which is available, and vice versa. Commonly\u00adused Frequencies and Resolutions LEDC Clock Source LEDC Output (PWM) Frequency Highest Resolution APB_CLK (80 MHz) 1 kHz 1/65536 (16 bit) APB_CLK (80 MHz) 5 kHz 1/8192 (13 bit) APB_CLK (80 MHz) 10 kHz 1/4096 (12 bit) RTC8M_CLK (8 MHz) 1 kHz 1/4096 (12 bit) RTC8M_CLK (8 MHz) 8 kHz 1/512(9 bit) REF_TICK (1 MHz) 1 kHz 1/512 (9 bit) 2. Channel Configuration ESP32-Arduino core \u041e\u0441\u043d\u043e\u0432\u0438 \u0428\u0418\u041c PWM duty cycle the ratio of the time that the signal is in a high(on) state over the total time it takes to complete one cycle |voltage amplitude|duty cycle|output voltage | |----|---|----| 3.3V |100 %| 3.3 V| 3.3V |75 %| 2.475 V| 3.3V |50 %| 1.65 V| 3.3V |25 %| 0.85 V| 3.3V |0 %| 0.0 V| resolution resolution values as unit duty cycle range duty cycle value in unit at 50% 16 bit 1- 65536 0-100 % 32768 13 bit 1-8192 0-100 % 4096 12 bit 1-4096 0-100 % 2048 10 bit 1-1024 0-100 % 512 8 bit 1-256 0-100 % 128 frequency / period It determines the speed at which the PWM completes one cycle, which means the speed at which the signal switches between high and low states. If we turn the digital signal on and off repeatedly with a high enough frequency, the output will behave like an analogue signal with a constant voltage. resolution resolution values as unit duty cycle range duty cycle value in unit at 50% 16 bit 1- 65536 0-100 % 32768 13 bit 1-8192 0-100 % 4096 12 bit 1-4096 0-100 % 2048 10 bit 1-1024 0-100 % 512 8 bit 1-256 0-100 % 128 \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0428\u0418\u041c Adjust Brightness of Screen using PWM For PWM, adjusting the brightness of the screen does not rely on the power but by alternating on and off of the screen. When the PWM dimming screen is lit, it does not continuously emit light, but it constantly lights up and turns off the screen. If this changes fast enough, our eyes treat is as always on but with different brightness based on different duty cycles. The larger the duty cycle, the brighter the screen. \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435 const int ledPin = 2 ; const uint8_t channel = 8 ; const double freq = 10000 ; const uint8_t pwmResolution = 12 ; void setup (){ ledcSetup ( channel , freq , pwmResolution ); ledcAttachPin ( ledPin , channel ); Serial . begin ( 9600 ); } void loop (){ for ( int i = 0 ; i < 4095 ; i ++ ) { ledcWrite ( channel , i ); delay ( 1 ); } delay ( 1000 ); for ( int i = 4095 ; i > 0 ; i -- ) { ledcWrite ( channel , i ); delay ( 1 ); } delay ( 1000 ); } \u043e\u0441\u043d\u043e\u0432\u043d\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 double ledcSetup ( uint8_t chan , double freq , uint8_t bit_num ) - uint8_t chan \u0438\u0437\u0431\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u0430\u043d\u0430\u043b \u043e\u0442 LEDC \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 0-15 - double freq \u0447\u0435\u0441\u0442\u043e\u0442\u0430 \u043d\u0430 \u0437\u0430\u043f\u044a\u043b\u0432\u0430\u043d\u0435 - uint8_t bit_num \u0440\u0435\u0437\u043e\u043b\u044e\u0446\u0438\u044f \u043d\u0430 \u0428\u0418\u041c 0-16 bit \u043f\u0440\u0435\u043f\u043e\u0440\u044a\u0447\u0438\u0442\u0435\u043b\u043d\u0438 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438 | \u0447\u0435\u0441\u0442\u043e\u0442\u0430 |\u043d\u0430\u0439-\u0432\u0438\u0441\u043e\u043a\u0430 \u0440\u0435\u0437\u043e\u043b\u044e\u0446\u0438\u044f| |---|---| 1 kHz | 1/65536 (16 bit) 5 kHz | 1/8192 (13 bit) 10 kHz |1/4096 (12 bit) void ledcAttachPin ( uint8_t pin , uint8_t chan ) void ledcWrite ( uint8_t chan , uint32_t duty )","title":"ESP32-LEDC"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/#esp32-idf","text":"LED Controller with 16 channels 8 channels in high speed mode 8 channels in low speed mode LEDC channels are divided into two groups of 8 channels each. One group of LEDC channels operates in high speed mode. This mode is implemented in hardware and offers automatic and glitch-free changing of the PWM duty cycle. The other group of channels operate in low speed mode, the PWM duty cycle must be changed by the driver in software. Setting up a channel of the LEDC in either high or low speed mode is done in three steps: Timer Configuration by specifying the PWM signal\u2019s frequency and duty cycle resolution. Channel Configuration by associating it with the timer and GPIO to output the PWM signal. Change PWM Signal that drives the output in order to change LED\u2019s intensity. This can be done under the full control of software or with hardware fading functions.","title":"ESP32-IDF"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/#1-timer-configuration","text":"The frequency and the duty resolution are interdependent. The higher the PWM frequency, the lower the duty resolution which is available, and vice versa. Commonly\u00adused Frequencies and Resolutions LEDC Clock Source LEDC Output (PWM) Frequency Highest Resolution APB_CLK (80 MHz) 1 kHz 1/65536 (16 bit) APB_CLK (80 MHz) 5 kHz 1/8192 (13 bit) APB_CLK (80 MHz) 10 kHz 1/4096 (12 bit) RTC8M_CLK (8 MHz) 1 kHz 1/4096 (12 bit) RTC8M_CLK (8 MHz) 8 kHz 1/512(9 bit) REF_TICK (1 MHz) 1 kHz 1/512 (9 bit)","title":"1. Timer Configuration"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/#2-channel-configuration","text":"","title":"2. Channel Configuration"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/#esp32-arduino-core","text":"","title":"ESP32-Arduino core"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/#pwm","text":"duty cycle the ratio of the time that the signal is in a high(on) state over the total time it takes to complete one cycle |voltage amplitude|duty cycle|output voltage | |----|---|----| 3.3V |100 %| 3.3 V| 3.3V |75 %| 2.475 V| 3.3V |50 %| 1.65 V| 3.3V |25 %| 0.85 V| 3.3V |0 %| 0.0 V| resolution resolution values as unit duty cycle range duty cycle value in unit at 50% 16 bit 1- 65536 0-100 % 32768 13 bit 1-8192 0-100 % 4096 12 bit 1-4096 0-100 % 2048 10 bit 1-1024 0-100 % 512 8 bit 1-256 0-100 % 128 frequency / period It determines the speed at which the PWM completes one cycle, which means the speed at which the signal switches between high and low states. If we turn the digital signal on and off repeatedly with a high enough frequency, the output will behave like an analogue signal with a constant voltage. resolution resolution values as unit duty cycle range duty cycle value in unit at 50% 16 bit 1- 65536 0-100 % 32768 13 bit 1-8192 0-100 % 4096 12 bit 1-4096 0-100 % 2048 10 bit 1-1024 0-100 % 512 8 bit 1-256 0-100 % 128","title":"\u041e\u0441\u043d\u043e\u0432\u0438 \u0428\u0418\u041c PWM"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/#_1","text":"Adjust Brightness of Screen using PWM For PWM, adjusting the brightness of the screen does not rely on the power but by alternating on and off of the screen. When the PWM dimming screen is lit, it does not continuously emit light, but it constantly lights up and turns off the screen. If this changes fast enough, our eyes treat is as always on but with different brightness based on different duty cycles. The larger the duty cycle, the brighter the screen.","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0428\u0418\u041c"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/#_2","text":"const int ledPin = 2 ; const uint8_t channel = 8 ; const double freq = 10000 ; const uint8_t pwmResolution = 12 ; void setup (){ ledcSetup ( channel , freq , pwmResolution ); ledcAttachPin ( ledPin , channel ); Serial . begin ( 9600 ); } void loop (){ for ( int i = 0 ; i < 4095 ; i ++ ) { ledcWrite ( channel , i ); delay ( 1 ); } delay ( 1000 ); for ( int i = 4095 ; i > 0 ; i -- ) { ledcWrite ( channel , i ); delay ( 1 ); } delay ( 1000 ); }","title":"\u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435"},{"location":"Notes/ESP32-LEDC/ESP32-LEDC/#_3","text":"double ledcSetup ( uint8_t chan , double freq , uint8_t bit_num ) - uint8_t chan \u0438\u0437\u0431\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043a\u0430\u043d\u0430\u043b \u043e\u0442 LEDC \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 0-15 - double freq \u0447\u0435\u0441\u0442\u043e\u0442\u0430 \u043d\u0430 \u0437\u0430\u043f\u044a\u043b\u0432\u0430\u043d\u0435 - uint8_t bit_num \u0440\u0435\u0437\u043e\u043b\u044e\u0446\u0438\u044f \u043d\u0430 \u0428\u0418\u041c 0-16 bit \u043f\u0440\u0435\u043f\u043e\u0440\u044a\u0447\u0438\u0442\u0435\u043b\u043d\u0438 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438 | \u0447\u0435\u0441\u0442\u043e\u0442\u0430 |\u043d\u0430\u0439-\u0432\u0438\u0441\u043e\u043a\u0430 \u0440\u0435\u0437\u043e\u043b\u044e\u0446\u0438\u044f| |---|---| 1 kHz | 1/65536 (16 bit) 5 kHz | 1/8192 (13 bit) 10 kHz |1/4096 (12 bit) void ledcAttachPin ( uint8_t pin , uint8_t chan ) void ledcWrite ( uint8_t chan , uint32_t duty )","title":"\u043e\u0441\u043d\u043e\u0432\u043d\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"Notes/ESP32-TIMER/ESP32-TIMER/","text":"Hardware Timers in esp32 The ESP32 chip contains two hardware timer groups. Each group has two general-purpose hardware timers. They are all 64-bit generic timers based on 16-bit pre-scalers and 64-bit up / down counters which are capable of being auto-reloaded. - 2 groups x 2 hw timers = 4 timers (0-3) - 16 bit prescaler - typically the frequency of the base signal used by the ESP32 counters is 80 MHz (this is true for the FireBeetle board) 80 000 000 times per second - using a prescaler of 80 will lead to 1 000 000 times per second - each microsecond the counter will go up simple watchdog timer extern \"C\" { #include \"esp_system.h\" } const int button = 0 ; //gpio to use to trigger delay const int wdtTimeout = 3000 ; //time in ms to trigger the watchdog hw_timer_t * timer = NULL ; void ARDUINO_ISR_ATTR resetModule () { ets_printf ( \"reboot \\n \" ); esp_restart (); } void setup () { Serial . begin ( 115200 ); Serial . println (); Serial . println ( \"running setup\" ); pinMode ( button , INPUT_PULLUP ); //init control pin timer = timerBegin ( 0 , 80 , true ); //timer 0, div 80 timerAttachInterrupt ( timer , & resetModule , true ); //attach callback timerAlarmWrite ( timer , wdtTimeout * 1000 , false ); //set time in us timerAlarmEnable ( timer ); //enable interrupt } void loop () { Serial . println ( \"running main loop\" ); timerWrite ( timer , 0 ); //reset timer (feed watchdog) long loopTime = millis (); //while button is pressed, delay up to 3 seconds to trigger the timer while ( ! digitalRead ( button )) { Serial . println ( \"button pressed\" ); delay ( 500 ); } delay ( 1000 ); //simulate work loopTime = millis () - loopTime ; Serial . print ( \"loop time is = \" ); Serial . println ( loopTime ); //should be under 3000 } not so simple repeat timer we will need to declare a variable of type portMUX_TYPE, which we will use to take care of the synchronization between the main loop and the ISR, when modifying a shared variable. portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED; volatile int interruptCounter; the shared variable when changing the value of shared variable we use spinlock macros ** portENTER_CRITICAL ( & timerMux ); interruptCounter -- ; portEXIT_CRITICAL ( & timerMux ); basic initialization usage initialize timer initialize our timer with a call to the timerBegin function, which will return a pointer to a structure of type hw_timer_t, which is the one of the timer global variable we declared in the previous section. c hw_timer_t * timerBegin(uint8_t num, uint16_t divider, bool countUp) As input, this function receives the number of the timer we want to use (from 0 to 3, since we have 4 hardware timers), the value of the prescaler and a flag indicating if the counter should count up (true) or down (false). attatch ISR bind it to a handling function void timerAttachInterrupt ( hw_timer_t * timer , void ( * fn )( void ), bool edge ) This function receives as input a pointer to the initialized timer, which we stored in our global variable, the address of the function that will handle the interrupt and a flag indicating if the interrupt to be generated is edge (true) or level (false) specify the counter value in which the timer interrupt will be generated void timerAlarmWrite ( hw_timer_t * timer , uint64_t alarm_value , bool autoreload ) this function receives as first input the pointer to the timer, as second the value of the counter in which the interrupt should be generated, and as third a flag indicating if the timer should automatically reload upon generating the interrupt. Regarding the second argument, remember that we set the prescaler in order for this to mean the number of microseconds after which the interrupt should occur. So, for this example, we assume that we want to generate an interrupt each second, and thus we pass the value of 1 000 000 microseconds, which is equal to 1 second. Important: Take in consideration that this value is specified in microseconds only if we specify the value 80 for the prescaler. We can use different prescaler values and in that case we need to do the calculations to know when the counter will reach a certain value. enable the timer We finish our setup function by enabling the timer with a call to the timerAlarmEnable function, passing as input our timer variable. void timerAlarmEnable ( hw_timer_t * timer ) example setup void setup () { Serial . begin ( 115200 ); timer = timerBegin ( 0 , 80 , true ); timerAttachInterrupt ( timer , & onTimer , true ); timerAlarmWrite ( timer , 1000000 , true ); timerAlarmEnable ( timer ); } ISR The interrupt handling routine should have the IRAM_ATTR attribute, in order for the compiler to place the code in IRAM. Also, interrupt handling routines should only call functions also placed in IRAM As usual, since this counter variable will be shared amongst the main loop and the ISR , then it needs to be declared with the volatile keyword, which avoids it being removed due to compiler optimizations . #include \"C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\2.0.2\\cores\\esp32\\esp32-hal-timer.h\" #include \"Arduino.h\" volatile int interruptCounter ; int totalInterruptCounter ; hw_timer_t * timer = NULL ; portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED ; void IRAM_ATTR onTimer () { portENTER_CRITICAL_ISR ( & timerMux ); interruptCounter ++ ; portEXIT_CRITICAL_ISR ( & timerMux ); } void setup () { Serial . begin ( 115200 ); timer = timerBegin ( 0 , 80 , true ); //from 0 to 3, since we have 4 hardware timers) timerAttachInterrupt ( timer , & onTimer , true ); timerAlarmWrite ( timer , 1000000 , true ); timerAlarmEnable ( timer ); } void loop () { if ( interruptCounter > 0 ) { portENTER_CRITICAL ( & timerMux ); interruptCounter -- ; portEXIT_CRITICAL ( & timerMux ); totalInterruptCounter ++ ; Serial . print ( \"An interrupt as occurred. Total number: \" ); Serial . println ( totalInterruptCounter ); } } Resources https://techtutorialsx.com/2017/10/07/esp32-arduino-timer-interrupts/ polling spinlock vs semaphore https://techtutorialsx.com/2021/08/07/esp32-ticker-library/ USE builtin library in Arduino core Timer.h limitations: count seconds or milliseconds, no microseconds useful for simple tasks no ISR needed no volatile ect. #include <Arduino.h> #include <Ticker.h> // attach a LED to GPIO 21 #define LED_PIN 2 Ticker tickerSetHigh ; Ticker tickerSetLow ; void setPin ( int state ) { digitalWrite ( LED_PIN , state ); } void setup () { pinMode ( LED_PIN , OUTPUT ); digitalWrite ( 1 , LOW ); // every 25 ms, call setPin(0) tickerSetLow . attach ( 5 , setPin , 0 ); // every 26 ms, call setPin(1) tickerSetHigh . attach ( 6 , setPin , 1 ); } void loop () { }","title":"ESP32-TIMER"},{"location":"Notes/ESP32-TIMER/ESP32-TIMER/#hardware-timers-in-esp32","text":"The ESP32 chip contains two hardware timer groups. Each group has two general-purpose hardware timers. They are all 64-bit generic timers based on 16-bit pre-scalers and 64-bit up / down counters which are capable of being auto-reloaded. - 2 groups x 2 hw timers = 4 timers (0-3) - 16 bit prescaler - typically the frequency of the base signal used by the ESP32 counters is 80 MHz (this is true for the FireBeetle board) 80 000 000 times per second - using a prescaler of 80 will lead to 1 000 000 times per second - each microsecond the counter will go up","title":"Hardware Timers in esp32"},{"location":"Notes/ESP32-TIMER/ESP32-TIMER/#simple-watchdog-timer","text":"extern \"C\" { #include \"esp_system.h\" } const int button = 0 ; //gpio to use to trigger delay const int wdtTimeout = 3000 ; //time in ms to trigger the watchdog hw_timer_t * timer = NULL ; void ARDUINO_ISR_ATTR resetModule () { ets_printf ( \"reboot \\n \" ); esp_restart (); } void setup () { Serial . begin ( 115200 ); Serial . println (); Serial . println ( \"running setup\" ); pinMode ( button , INPUT_PULLUP ); //init control pin timer = timerBegin ( 0 , 80 , true ); //timer 0, div 80 timerAttachInterrupt ( timer , & resetModule , true ); //attach callback timerAlarmWrite ( timer , wdtTimeout * 1000 , false ); //set time in us timerAlarmEnable ( timer ); //enable interrupt } void loop () { Serial . println ( \"running main loop\" ); timerWrite ( timer , 0 ); //reset timer (feed watchdog) long loopTime = millis (); //while button is pressed, delay up to 3 seconds to trigger the timer while ( ! digitalRead ( button )) { Serial . println ( \"button pressed\" ); delay ( 500 ); } delay ( 1000 ); //simulate work loopTime = millis () - loopTime ; Serial . print ( \"loop time is = \" ); Serial . println ( loopTime ); //should be under 3000 }","title":"simple watchdog timer"},{"location":"Notes/ESP32-TIMER/ESP32-TIMER/#not-so-simple-repeat-timer","text":"we will need to declare a variable of type portMUX_TYPE, which we will use to take care of the synchronization between the main loop and the ISR, when modifying a shared variable. portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED; volatile int interruptCounter; the shared variable when changing the value of shared variable we use spinlock macros ** portENTER_CRITICAL ( & timerMux ); interruptCounter -- ; portEXIT_CRITICAL ( & timerMux );","title":"not so simple repeat timer"},{"location":"Notes/ESP32-TIMER/ESP32-TIMER/#basic-initialization-usage","text":"initialize timer initialize our timer with a call to the timerBegin function, which will return a pointer to a structure of type hw_timer_t, which is the one of the timer global variable we declared in the previous section. c hw_timer_t * timerBegin(uint8_t num, uint16_t divider, bool countUp) As input, this function receives the number of the timer we want to use (from 0 to 3, since we have 4 hardware timers), the value of the prescaler and a flag indicating if the counter should count up (true) or down (false). attatch ISR bind it to a handling function void timerAttachInterrupt ( hw_timer_t * timer , void ( * fn )( void ), bool edge ) This function receives as input a pointer to the initialized timer, which we stored in our global variable, the address of the function that will handle the interrupt and a flag indicating if the interrupt to be generated is edge (true) or level (false) specify the counter value in which the timer interrupt will be generated void timerAlarmWrite ( hw_timer_t * timer , uint64_t alarm_value , bool autoreload ) this function receives as first input the pointer to the timer, as second the value of the counter in which the interrupt should be generated, and as third a flag indicating if the timer should automatically reload upon generating the interrupt. Regarding the second argument, remember that we set the prescaler in order for this to mean the number of microseconds after which the interrupt should occur. So, for this example, we assume that we want to generate an interrupt each second, and thus we pass the value of 1 000 000 microseconds, which is equal to 1 second. Important: Take in consideration that this value is specified in microseconds only if we specify the value 80 for the prescaler. We can use different prescaler values and in that case we need to do the calculations to know when the counter will reach a certain value. enable the timer We finish our setup function by enabling the timer with a call to the timerAlarmEnable function, passing as input our timer variable. void timerAlarmEnable ( hw_timer_t * timer ) example setup void setup () { Serial . begin ( 115200 ); timer = timerBegin ( 0 , 80 , true ); timerAttachInterrupt ( timer , & onTimer , true ); timerAlarmWrite ( timer , 1000000 , true ); timerAlarmEnable ( timer ); }","title":"basic initialization usage"},{"location":"Notes/ESP32-TIMER/ESP32-TIMER/#isr","text":"The interrupt handling routine should have the IRAM_ATTR attribute, in order for the compiler to place the code in IRAM. Also, interrupt handling routines should only call functions also placed in IRAM As usual, since this counter variable will be shared amongst the main loop and the ISR , then it needs to be declared with the volatile keyword, which avoids it being removed due to compiler optimizations . #include \"C:\\Users\\KolevBM\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\2.0.2\\cores\\esp32\\esp32-hal-timer.h\" #include \"Arduino.h\" volatile int interruptCounter ; int totalInterruptCounter ; hw_timer_t * timer = NULL ; portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED ; void IRAM_ATTR onTimer () { portENTER_CRITICAL_ISR ( & timerMux ); interruptCounter ++ ; portEXIT_CRITICAL_ISR ( & timerMux ); } void setup () { Serial . begin ( 115200 ); timer = timerBegin ( 0 , 80 , true ); //from 0 to 3, since we have 4 hardware timers) timerAttachInterrupt ( timer , & onTimer , true ); timerAlarmWrite ( timer , 1000000 , true ); timerAlarmEnable ( timer ); } void loop () { if ( interruptCounter > 0 ) { portENTER_CRITICAL ( & timerMux ); interruptCounter -- ; portEXIT_CRITICAL ( & timerMux ); totalInterruptCounter ++ ; Serial . print ( \"An interrupt as occurred. Total number: \" ); Serial . println ( totalInterruptCounter ); } }","title":"ISR"},{"location":"Notes/ESP32-TIMER/ESP32-TIMER/#resources","text":"https://techtutorialsx.com/2017/10/07/esp32-arduino-timer-interrupts/ polling spinlock vs semaphore https://techtutorialsx.com/2021/08/07/esp32-ticker-library/","title":"Resources"},{"location":"Notes/ESP32-TIMER/ESP32-TIMER/#use","text":"builtin library in Arduino core Timer.h limitations: count seconds or milliseconds, no microseconds useful for simple tasks no ISR needed no volatile ect. #include <Arduino.h> #include <Ticker.h> // attach a LED to GPIO 21 #define LED_PIN 2 Ticker tickerSetHigh ; Ticker tickerSetLow ; void setPin ( int state ) { digitalWrite ( LED_PIN , state ); } void setup () { pinMode ( LED_PIN , OUTPUT ); digitalWrite ( 1 , LOW ); // every 25 ms, call setPin(0) tickerSetLow . attach ( 5 , setPin , 0 ); // every 26 ms, call setPin(1) tickerSetHigh . attach ( 6 , setPin , 1 ); } void loop () { }","title":"USE "},{"location":"examples/01-button/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u0431\u0443\u0442\u043e\u043d SW1 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0432\u0430 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434, \u0430 \u0431\u0443\u0442\u043e\u043d SW2 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0432\u0430 \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434. \u0414\u0432\u0430\u0442\u0430 \u0431\u0443\u0442\u043e\u043d\u0430 (SW1 \u0438 SW2) \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e \u043a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 D19 \u0438 D18. \u0414\u0432\u0430\u0442\u0430 \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u0430 (LED-R \u0438 LED-G) \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e \u043a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 D4 \u0438 D2. */ // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int SW1_pin = 19 ; const int SW2_pin = 18 ; const int LEDR_pin = 4 ; const int LEDG_pin = 2 ; // \u043f\u0440\u043e\u043c\u0435\u043d\u043b\u0438\u0432\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0440\u0438 \u0447\u0435\u0442\u0435\u043d\u0435\u0442\u043e \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0442\u0438\u0435 int SW1_state ; int SW2_state ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0438\u043d\u043e\u0432\u0435\u0442\u0435 \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0438\u0442\u0435 \u043a\u0430\u0442\u043e \"\u0432\u0445\u043e\u0434\u043e\u0432\u0435\" pinMode ( SW1_pin , INPUT_PULLUP ); pinMode ( SW2_pin , INPUT_PULLUP ); // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0438\u043d\u043e\u0432\u0435\u0442\u0435 \u043d\u0430 \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u0438\u0442\u0435 \u043a\u0430\u0442\u043e \"\u0438\u0437\u0445\u043e\u0434\u0438\" pinMode ( LEDR_pin , OUTPUT ); pinMode ( LEDG_pin , OUTPUT ); } void loop () { // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u0442\u0430 \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0438\u0442\u0435 (0/LOW \u043f\u0440\u0438 \u043d\u0430\u0442\u0438\u0441\u043d\u0430\u0442, 1/HIGH \u043f\u0440\u0438 \u043e\u0442\u043f\u0443\u0441\u043d\u0430\u0442): SW1_state = digitalRead ( SW1_pin ); SW2_state = digitalRead ( SW2_pin ); // \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430 \u043d\u0430\u0442\u0438\u0441\u043d\u0430\u0442\u0438 \u0431\u0443\u0442\u043e\u043d\u0438: if ( SW1_state == LOW ) { // \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434: digitalWrite ( LEDR_pin , HIGH ); } else { // \u0438\u0437\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 digitalWrite ( LEDR_pin , LOW ); } if ( SW2_state == LOW ) { // \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434: digitalWrite ( LEDG_pin , HIGH ); } else { // \u0438\u0437\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 digitalWrite ( LEDG_pin , LOW ); } }","title":"01. \u0411\u0443\u0442\u043e\u043d\u0438"},{"location":"examples/02-encoder/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0441\u043e\u043a\u043e\u0442\u0430 \u043d\u0430 \u0432\u044a\u0440\u0442\u0435\u043d\u0435 \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u0438\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440 \u0438 \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u0442\u043e \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0430 \u043c\u0443 \u0441\u0435 \u043f\u043e\u043a\u0430\u0437\u0432\u0430\u0442 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 (Tools -> Serial Monitor). \u0414\u0432\u0430\u0442\u0430 \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u0437\u0430 \u043f\u043e\u0441\u043e\u043a\u0430 \u0438 \u0431\u0443\u0442\u043e\u043d\u0430 (ENC-A, ENC-B \u0438 ENC-SW) \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e \u043a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 D13, D14 \u0438 D12. \u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u0441\u0435 \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0430\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \"ESP32Encoder\" \u043d\u0430 \"madhephaestus\", \u043a\u043e\u044f\u0442\u043e \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u043d\u043e (https://github.com/madhephaestus/ESP32Encoder/) */ // \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0430\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0437\u0430 \u0447\u0435\u0442\u0435\u043d\u0435 \u043d\u0430 \u0440\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0435\u043d\u043a\u043e\u0434\u0435\u0440 #include <ESP32Encoder.h> // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int ENC_A_pin = 13 ; const int ENC_B_pin = 14 ; const int ENC_SW_pin = 12 ; // \u043f\u0440\u043e\u043c\u0435\u043d\u043b\u0438\u0432\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0440\u0438 \u0447\u0435\u0442\u0435\u043d\u0435\u0442\u043e ESP32Encoder encoder ; int encoderCount ; int ENC_SW_state ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0438\u043d\u0430 \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0430 \u043a\u0430\u0442\u043e \"\u0432\u0445\u043e\u0434\" pinMode ( ENC_SW_pin , INPUT_PULLUP ); // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u0435\u043d\u043a\u043e\u0434\u0435\u0440\u043d\u0430\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 //encoder.attachFullQuad(ENC_A_pin, ENC_B_pin); //encoder.attachHalfQuad(ENC_A_pin, ENC_B_pin); encoder . attachSingleEdge ( ENC_A_pin , ENC_B_pin ); encoder . clearCount (); // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0430\u0442\u0430 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f // \u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0430: \u0432 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f\u0442 \u043c\u043e\u043d\u0438\u0442\u043e\u0440 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0431\u044a\u0434\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u0430 \u0441\u044a\u0449\u0430\u0442\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442 Serial . begin ( 115200 ); } void loop () { // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u0442\u043e \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0430 (0/LOW \u043f\u0440\u0438 \u043d\u0430\u0442\u0438\u0441\u043d\u0430\u0442, 1/HIGH \u043f\u0440\u0438 \u043e\u0442\u043f\u0443\u0441\u043d\u0430\u0442): ENC_SW_state = digitalRead ( ENC_SW_pin ); // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u0442\u043e \u043d\u0430 \u0435\u043d\u043a\u043e\u0434\u0435\u0440\u0430 encoderCount = encoder . getCount (); // \u043f\u043e\u043a\u0430\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 Serial . print ( \"SWITCH= \" ); Serial . print ( ENC_SW_state ); Serial . print ( \" \\t\\t \" ); Serial . print ( \"COUNT= \" ); Serial . print ( encoderCount ); Serial . println ( \" \\t\\t \" ); delay ( 100 ); }","title":"02. \u0420\u043e\u0442\u0430\u0446\u0438\u043e\u043d\u0435\u043d \u0435\u043d\u043a\u043e\u0434\u0435\u0440"},{"location":"examples/03-rgb/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f, \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0441\u0438\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u0441\u0435 \u043f\u0440\u0435\u0432\u043a\u043b\u044e\u0447\u0432\u0430\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u043d\u043e. \u0422\u0440\u0438\u0442\u0435 \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u0430 (LED-R, LED-G \u0438 LED-B) \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e \u043a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 D4, D2 \u0438 D25. */ // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int LEDR_pin = 4 ; const int LEDG_pin = 2 ; const int LEDB_pin = 25 ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0438\u043d\u043e\u0432\u0435\u0442\u0435 \u043d\u0430 \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u0438\u0442\u0435 \u043a\u0430\u0442\u043e \"\u0438\u0437\u0445\u043e\u0434\u0438\" pinMode ( LEDR_pin , OUTPUT ); pinMode ( LEDG_pin , OUTPUT ); pinMode ( LEDB_pin , OUTPUT ); } void loop () { digitalWrite ( LEDR_pin , HIGH ); // \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 delay ( 1000 ); // \u0438\u0437\u0447\u0430\u043a\u0432\u0430\u043d\u0435 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430 digitalWrite ( LEDR_pin , LOW ); // \u0438\u0437\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 delay ( 1000 ); // \u0438\u0437\u0447\u0430\u043a\u0432\u0430\u043d\u0435 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430 digitalWrite ( LEDG_pin , HIGH ); // \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 delay ( 1000 ); // \u0438\u0437\u0447\u0430\u043a\u0432\u0430\u043d\u0435 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430 digitalWrite ( LEDG_pin , LOW ); // \u0438\u0437\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 delay ( 1000 ); // \u0438\u0437\u0447\u0430\u043a\u0432\u0430\u043d\u0435 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430 digitalWrite ( LEDB_pin , HIGH ); // \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0438\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 delay ( 1000 ); // \u0438\u0437\u0447\u0430\u043a\u0432\u0430\u043d\u0435 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430 digitalWrite ( LEDB_pin , LOW ); // \u0438\u0437\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0438\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 delay ( 1000 ); // \u0438\u0437\u0447\u0430\u043a\u0432\u0430\u043d\u0435 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430 }","title":"03. RGB \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434"},{"location":"examples/04-transistors/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f, \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0441\u0438\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u0441\u0435 \u0434\u0438\u043c\u0438\u0440\u0430\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u043d\u043e. \u0422\u0440\u0438\u0442\u0435 \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u0430 (LED-R, LED-G \u0438 LED-B) \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e \u043a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 D4, D2 \u0438 D25. */ // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int LEDR_pin = 4 ; const int LEDG_pin = 2 ; const int LEDB_pin = 25 ; // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 PWM \u043a\u0430\u043d\u0430\u043b\u0438 const int LEDR_ch = 0 ; const int LEDG_ch = 1 ; const int LEDB_ch = 2 ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 PWM \u043a\u0430\u043d\u0430\u043b\u0438\u0442\u0435, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0435 \u0437\u0430 \u0434\u0438\u043c\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u0438\u0442\u0435: ledcSetup ( LEDR_ch , 5000 , 8 ); // \u043a\u0430\u043d\u0430\u043b 0, \u0447\u0435\u0441\u0442\u043e\u0442\u0430 5 kHz, 8 \u0431\u0438\u0442\u0430 (0-255) ledcSetup ( LEDG_ch , 5000 , 8 ); // \u043a\u0430\u043d\u0430\u043b 1, \u0447\u0435\u0441\u0442\u043e\u0442\u0430 5 kHz, 8 \u0431\u0438\u0442\u0430 (0-255) ledcSetup ( LEDB_ch , 5000 , 8 ); // \u043a\u0430\u043d\u0430\u043b 2, \u0447\u0435\u0441\u0442\u043e\u0442\u0430 5 kHz, 8 \u0431\u0438\u0442\u0430 (0-255) // \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u043a\u0430\u043d\u0430\u043b\u0438\u0442\u0435 \u043a\u044a\u043c \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435: ledcAttachPin ( LEDR_pin , LEDR_ch ); // \u0447\u0435\u0440\u0432\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u043a\u044a\u043c \u043a\u0430\u043d\u0430\u043b 0 ledcAttachPin ( LEDG_pin , LEDG_ch ); // \u0437\u0435\u043b\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u043a\u044a\u043c \u043a\u0430\u043d\u0430\u043b 1 ledcAttachPin ( LEDB_pin , LEDB_ch ); // \u0441\u0438\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u043a\u044a\u043c \u043a\u0430\u043d\u0430\u043b 2 } void loop () { // \u0443\u0432\u0435\u043b\u0438\u0447\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u044f\u0440\u043a\u043e\u0441\u0442\u0442\u0430 \u043d\u0430 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 for ( int dc = 0 ; dc <= 255 ; dc ++ ){ ledcWrite ( LEDR_ch , dc ); delay ( 15 ); } // \u043d\u0430\u043c\u0430\u043b\u044f\u0432\u0430\u043d\u0435 \u043d\u0430 \u044f\u0440\u043a\u043e\u0441\u0442\u0442\u0430 \u043d\u0430 \u0447\u0435\u0440\u0432\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 for ( int dc = 255 ; dc >= 0 ; dc -- ){ ledcWrite ( LEDR_ch , dc ); delay ( 15 ); } // \u0443\u0432\u0435\u043b\u0438\u0447\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u044f\u0440\u043a\u043e\u0441\u0442\u0442\u0430 \u043d\u0430 \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 for ( int dc = 0 ; dc <= 255 ; dc ++ ){ ledcWrite ( LEDG_ch , dc ); delay ( 15 ); } // \u043d\u0430\u043c\u0430\u043b\u044f\u0432\u0430\u043d\u0435 \u043d\u0430 \u044f\u0440\u043a\u043e\u0441\u0442\u0442\u0430 \u043d\u0430 \u0437\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 for ( int dc = 255 ; dc >= 0 ; dc -- ){ ledcWrite ( LEDG_ch , dc ); delay ( 15 ); } // \u0443\u0432\u0435\u043b\u0438\u0447\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u044f\u0440\u043a\u043e\u0441\u0442\u0442\u0430 \u043d\u0430 \u0441\u0438\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 for ( int dc = 0 ; dc <= 255 ; dc ++ ){ ledcWrite ( LEDB_ch , dc ); delay ( 15 ); } // \u043d\u0430\u043c\u0430\u043b\u044f\u0432\u0430\u043d\u0435 \u043d\u0430 \u044f\u0440\u043a\u043e\u0441\u0442\u0442\u0430 \u043d\u0430 \u0441\u0438\u043d\u0438\u044f \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 for ( int dc = 255 ; dc >= 0 ; dc -- ){ ledcWrite ( LEDB_ch , dc ); delay ( 15 ); } }","title":"04. \u0422\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u043d\u0438 \u0446\u0438\u0444\u0440\u043e\u0432\u0438 \u0438\u0437\u0445\u043e\u0434\u0438"},{"location":"examples/05-piezo/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0438\u0435\u0437\u043e-\u0437\u0443\u043c\u0435\u0440\u0430 (\u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c \u043f\u0438\u043d D26) ... . */ // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int PB_pin = 26 ; // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 PWM \u043a\u0430\u043d\u0430\u043b\u0438 const int PB_ch = 3 ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 PWM \u043a\u0430\u043d\u0430\u043b\u0430, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d \u0437\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043f\u0438\u0435\u0437\u043e-\u0437\u0443\u043c\u0435\u0440\u0430: ledcSetup ( PB_ch , 2000 , 8 ); // \u043a\u0430\u043d\u0430\u043b 3, \u0447\u0435\u0441\u0442\u043e\u0442\u0430 2 kHz, 8 \u0431\u0438\u0442\u0430 (0-255) // \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 PWM-\u043a\u0430\u043d\u0430\u043b\u0430 \u043a\u044a\u043c \u043f\u0438\u043d\u0430 \u043d\u0430 \u043f\u0438\u0435\u0437\u043e-\u0437\u0443\u043c\u0435\u0440\u0430 ledcAttachPin ( PB_pin , PB_ch ); // \u0447\u0435\u0440\u0432\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434 \u043a\u044a\u043c \u043a\u0430\u043d\u0430\u043b 0 } void loop () { // \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u0435\u043d \u0442\u043e\u043d \u0441 \u0447\u0435\u0441\u0442\u043e\u0442\u0435 2 kHz... ledcWriteTone ( PB_ch , 2000 ); // ...\u0438 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u043f\u0440\u043e\u043c\u0435\u043d\u044f\u043d\u0435 \u043d\u0430 \u0441\u0438\u043b\u0430\u0442\u0430 \u043d\u0430 \u0442\u043e\u043d\u0430 (0-255, \u0441\u0442\u044a\u043f\u043a\u0430 10) for ( int dc = 0 ; dc <= 255 ; dc = dc + 10 ){ ledcWrite ( PB_ch , dc ); delay ( 1000 ); } // \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u0430 \u0441\u0438\u043b\u0430 \u043d\u0430 \u0442\u043e\u043d\u0430 (125/255)... ledcWrite ( PB_ch , 125 ); // ...\u0438 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u043f\u0440\u043e\u043c\u0435\u043d\u044f\u043d\u0435 \u043d\u0430 \u0447\u0435\u0441\u0442\u043e\u0442\u0430\u0442\u0430 \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0430\u043d\u0438\u044f \u0442\u043e\u043d (255 Hz - 10 kHz, \u0441\u0442\u044a\u043f\u043a\u0430 250 Hz) for ( int freq = 255 ; freq < 10000 ; freq = freq + 250 ){ ledcWriteTone ( PB_ch , freq ); delay ( 1000 ); } }","title":"05. \u041f\u0438\u0435\u0437\u043e-\u0437\u0443\u043c\u0435\u0440"},{"location":"examples/06-touch/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u0441\u0435\u043d\u0437\u043e\u0440\u0438\u0442\u0435 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 TS1, TS2, TS3 \u0441\u0435 \u043f\u043e\u043a\u0430\u0437\u0432\u0430\u0442 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 (Tools -> Serial Monitor). \u0422\u0440\u0438\u0442\u0435 \u0441\u0435\u043d\u0437\u043e\u0440\u0430 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440 (TS1, TS2 \u0438 TS3) \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e \u043a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 D27, D33 \u0438 D32. */ // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int TS1_pin = 27 ; const int TS2_pin = 33 ; const int TS3_pin = 32 ; // \u043f\u0440\u043e\u043c\u0435\u043d\u043b\u0438\u0432\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0440\u0438 \u0447\u0435\u0442\u0435\u043d\u0435\u0442\u043e \u043d\u0430 \u0441\u0435\u043d\u0437\u043e\u0440\u0438\u0442\u0435 int TS1_value ; int TS2_value ; int TS3_value ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0430\u0442\u0430 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f // \u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0430: \u0432 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f\u0442 \u043c\u043e\u043d\u0438\u0442\u043e\u0440 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0431\u044a\u0434\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u0430 \u0441\u044a\u0449\u0430\u0442\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442 Serial . begin ( 115200 ); } void loop () { // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u0441\u0435\u043d\u0437\u043e\u0440\u0438\u0442\u0435: TS1_value = touchRead ( TS1_pin ); TS2_value = touchRead ( TS2_pin ); TS3_value = touchRead ( TS3_pin ); // \u043f\u043e\u043a\u0430\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 // (\u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0442\u0430 \u043d\u0430\u043c\u0430\u043b\u044f\u0432\u0430 \u043f\u0440\u0438 \u0434\u043e\u043f\u0438\u0440) Serial . print ( \"TS1= \" ); Serial . print ( TS1_value ); Serial . print ( \" \\t\\t \" ); Serial . print ( \"TS2= \" ); Serial . print ( TS2_value ); Serial . print ( \" \\t\\t \" ); Serial . print ( \"TS3= \" ); Serial . print ( TS3_value ); Serial . println ( \" \\t\\t \" ); delay ( 100 ); }","title":"06. \u0421\u0435\u043d\u0437\u043e\u0440\u0438 \u0437\u0430 \u0434\u043e\u043f\u0438\u0440"},{"location":"examples/07-joystick/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u043e\u0441\u0438\u0442\u0435 \u043d\u0430 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a\u0430 \u0438 \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u0442\u043e \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0430 \u043c\u0443 \u0441\u0435 \u043f\u043e\u043a\u0430\u0437\u0432\u0430\u0442 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 (Tools -> Serial Monitor). \u041e\u0441 X, \u043e\u0441 Y \u0438 \u0431\u0443\u0442\u043e\u043d\u0430 (JOY-X, JOY-Y \u0438 JOY-SW) \u0441\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0441\u044a\u043e\u0442\u0432\u0435\u0442\u043d\u043e \u043a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 D39, D36 \u0438 D23. */ // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int JOY_X_pin = 39 ; const int JOY_Y_pin = 36 ; const int JOY_SW_pin = 23 ; // \u043f\u0440\u043e\u043c\u0435\u043d\u043b\u0438\u0432\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0440\u0438 \u0447\u0435\u0442\u0435\u043d\u0435\u0442\u043e \u043d\u0430 \u043e\u0441\u0438\u0442\u0435 \u0438 \u0431\u0443\u0442\u043e\u043d\u0430 int JOY_X_value ; int JOY_Y_value ; int JOY_SW_state ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0438\u043d\u0430 \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0430 \u043a\u0430\u0442\u043e \"\u0432\u0445\u043e\u0434\" pinMode ( JOY_SW_pin , INPUT_PULLUP ); // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0430\u0442\u0430 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f // \u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0430: \u0432 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f\u0442 \u043c\u043e\u043d\u0438\u0442\u043e\u0440 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0431\u044a\u0434\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u0430 \u0441\u044a\u0449\u0430\u0442\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442 Serial . begin ( 115200 ); } void loop () { // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u043e\u0441\u0438\u0442\u0435 (\u043c\u0435\u0436\u0434\u0443 0 \u0438 4095): JOY_X_value = analogRead ( JOY_X_pin ); JOY_Y_value = analogRead ( JOY_Y_pin ); // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0441\u044a\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u0442\u043e \u043d\u0430 \u0431\u0443\u0442\u043e\u043d\u0430 (0 \u043f\u0440\u0438 \u043d\u0430\u0442\u0438\u0441\u043d\u0430\u0442, 1 \u043f\u0440\u0438 \u043e\u0442\u043f\u0443\u0441\u043d\u0430\u0442): JOY_SW_state = digitalRead ( JOY_SW_pin ); // \u043f\u043e\u043a\u0430\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440: Serial . print ( \"X= \" ); Serial . print ( JOY_X_value ); Serial . print ( \" \\t\\t \" ); Serial . print ( \"Y= \" ); Serial . print ( JOY_Y_value ); Serial . print ( \" \\t\\t \" ); Serial . print ( \"SW= \" ); Serial . print ( JOY_SW_state ); Serial . println ( \" \\t\\t \" ); delay ( 100 ); }","title":"07. \u0410\u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u0434\u0436\u043e\u0439\u0441\u0442\u0438\u043a"},{"location":"examples/08-temperature/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0430\u0442\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442 \u043e\u0442 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0438\u044f \u0441\u0435\u043d\u0437\u043e\u0440 (MCP9701) \u0441\u0435 \u043f\u043e\u043a\u0430\u0437\u0432\u0430 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 (Tools -> Serial Monitor). \u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0438\u044f\u0442 \u0441\u0435\u043d\u0437\u043e\u0440 (TMP) e \u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c \u043f\u0438\u043d D35. */ // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int TMP_pin = 35 ; // \u043f\u0440\u043e\u043c\u0435\u043d\u043b\u0438\u0432\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0440\u0438 \u0447\u0435\u0442\u0435\u043d\u0435\u0442\u043e \u043d\u0430 \u0441\u0435\u043d\u0437\u043e\u0440\u0430 int TMP_value ; float DegC ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0430\u0442\u0430 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f // \u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0430: \u0432 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f\u0442 \u043c\u043e\u043d\u0438\u0442\u043e\u0440 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0431\u044a\u0434\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u0430 \u0441\u044a\u0449\u0430\u0442\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442 Serial . begin ( 115200 ); } void loop () { // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0442\u0430 \u043d\u0430 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0438\u044f \u0441\u0435\u043d\u0437\u043e\u0440 (\u043c\u0435\u0436\u0434\u0443 0 \u0438 4095): TMP_value = analogRead ( TMP_pin ); // \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0440\u043e\u0447\u0435\u0442\u0435\u043d\u0430\u0442\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442 \u0432 \u0446\u0435\u043b\u0437\u0438\u0435\u0432\u0438 \u0433\u0440\u0430\u0434\u0443\u0441\u0438 DegC = (((( float ) TMP_value * 3.3 ) / 4096.0 ) - 0.400 ) / .0195 ; // \u043f\u043e\u043a\u0430\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 Serial . print ( \"TMP= \" ); Serial . print ( TMP_value ); Serial . print ( \" \\t\\t \" ); Serial . print ( \"DEG= \" ); Serial . print ( DegC ); Serial . println ( \" \\t\\t \" ); delay ( 100 ); }","title":"08. \u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0435\u043d \u0441\u0435\u043d\u0437\u043e\u0440"},{"location":"examples/09-photodiode/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435 * \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0430\u0442\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442 \u043e\u0442 \u0444\u043e\u0442\u043e\u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0430 \u0441\u0435 \u043f\u043e\u043a\u0430\u0437\u0432\u0430 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 ( Tools -> Serial Monitor ). \u0444\u043e\u0442\u043e\u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u044a\u0442 ( PT ) e \u0441\u0432\u044a\u0440\u0437\u0430\u043d \u043a\u044a\u043c \u043f\u0438\u043d D34 . */ // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int PT_pin = 34 ; // \u043f\u0440\u043e\u043c\u0435\u043d\u043b\u0438\u0432\u0438, \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438 \u043f\u0440\u0438 \u0447\u0435\u0442\u0435\u043d\u0435\u0442\u043e \u043d\u0430 \u0444\u043e\u0442\u043e\u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0430 int PT_value ; void setup () { // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0430\u0442\u0430 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f // \u0417\u0430\u0431\u0435\u043b\u0435\u0436\u043a\u0430: \u0432 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f\u0442 \u043c\u043e\u043d\u0438\u0442\u043e\u0440 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0431\u044a\u0434\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u0430 \u0441\u044a\u0449\u0430\u0442\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442 Serial . begin ( 115200 ); } void loop () { // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0442\u0430 \u043d\u0430 \u0444\u043e\u0442\u043e\u0442\u0440\u0430\u043d\u0437\u0438\u0441\u0442\u043e\u0440\u0430 (\u043c\u0435\u0436\u0434\u0443 0 \u0438 4095): PT_value = analogRead ( PT_pin ); // \u043f\u043e\u043a\u0430\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0439\u043d\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440 Serial . print ( \"PT= \" ); Serial . print ( PT_value ); Serial . println ( \" \\t\\t \" ); delay ( 100 ); }","title":"09. \u0424\u043e\u0442\u043e\u0434\u0438\u043e\u0434"},{"location":"examples/10-infrared-tx/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435","title":"10. \u0418\u043d\u0444\u0440\u0430\u0447\u0435\u0440\u0432\u0435\u043d \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434"},{"location":"examples/11-infrared-rx/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435","title":"11. \u0418\u043d\u0444\u0440\u0430\u0447\u0435\u0440\u0432\u0435\u043d \u043f\u0440\u0438\u0435\u043c\u043d\u0438\u043a \u0441 \u0434\u0435\u043c\u043e\u0434\u0443\u043b\u0430\u0442\u043e\u0440 (38kHz)"},{"location":"examples/12-display/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 /* \u0412 \u0442\u043e\u0437\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u0430 \u0441 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u043d OLED \u0434\u0438\u0441\u043f\u043b\u0435\u0439 (128x64 \u043f\u0438\u043a\u0441\u0435\u043b\u0430, \u0435\u0434\u043d\u043e\u0446\u0432\u0435\u0442\u0435\u043d) \u0417\u0430 \u043a\u043e\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f \u0441 \u0434\u0438\u0441\u043f\u043b\u0435\u044f \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 I2C (\u0441\u0438\u0433\u043d\u0430\u043b\u0438 SDA \u0438 SCL, \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u043a\u044a\u043c \u043f\u0438\u043d\u043e\u0432\u0435 D21 \u0438 D22) \u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u0441\u0435 \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0430\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \"Universal 8bit Graphics Library\" \u043d\u0430 \"olikraus\", \u043a\u043e\u044f\u0442\u043e \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0435 \u0438\u043d\u0441\u0442\u0430\u043b\u0438\u0440\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u043d\u043e (https://github.com/olikraus/u8g2/) */ // \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0437\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0438\u0441\u043f\u043b\u0435\u044f #include <U8g2lib.h> #include <Wire.h> // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u043e\u043f\u0438\u0441\u0432\u0430\u0449\u0438 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043d\u0438\u0442\u0435 \u043f\u0438\u043d\u043e\u0432\u0435 const int I2C_SDA_pin = 21 ; const int I2C_SCL_pin = 22 ; // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438, \u0441\u044a\u0434\u044a\u0440\u0436\u0430\u0449\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0442\u0430 const unsigned char happy_30x30 [] PROGMEM = { 0x00 , 0xFC , 0x1F , 0x00 , 0x00 , 0xFF , 0x7F , 0x00 , 0xC0 , 0xFF , 0xFF , 0x03 , 0xF0 , 0x07 , 0xE0 , 0x07 , 0xF0 , 0x01 , 0x80 , 0x0F , 0x78 , 0x00 , 0x00 , 0x1E , 0x3C , 0x00 , 0x00 , 0x1C , 0x1E , 0x18 , 0x30 , 0x38 , 0x0E , 0x1C , 0x78 , 0x38 , 0x0E , 0x1C , 0x78 , 0x30 , 0x07 , 0x1C , 0x78 , 0x30 , 0x07 , 0x1C , 0x78 , 0x30 , 0x07 , 0x1C , 0x38 , 0x30 , 0x07 , 0x00 , 0x00 , 0x30 , 0x07 , 0x00 , 0x00 , 0x32 , 0x07 , 0x00 , 0x00 , 0x33 , 0x87 , 0x01 , 0x00 , 0x33 , 0x87 , 0x01 , 0x80 , 0x33 , 0x87 , 0x03 , 0xC0 , 0x39 , 0x87 , 0x07 , 0xC0 , 0x39 , 0x06 , 0x0F , 0xE0 , 0x38 , 0x0E , 0x3E , 0x78 , 0x18 , 0x0E , 0xFC , 0x7F , 0x1C , 0x1C , 0xF0 , 0x1F , 0x0E , 0x38 , 0x80 , 0x07 , 0x0F , 0x78 , 0x00 , 0x80 , 0x07 , 0xF0 , 0x01 , 0xC0 , 0x07 , 0xC0 , 0x0F , 0xF8 , 0x03 , 0x80 , 0xFF , 0xFF , 0x00 , 0x00 , 0xFC , 0x3F , 0x00 , }; const unsigned char like_30x30 [] PROGMEM = { 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x0F , 0x00 , 0x00 , 0x80 , 0x1F , 0x00 , 0x00 , 0x80 , 0x1F , 0x00 , 0x00 , 0x80 , 0x3B , 0x00 , 0x00 , 0x80 , 0x3B , 0x00 , 0x00 , 0x80 , 0x3B , 0x00 , 0x00 , 0x80 , 0x39 , 0x00 , 0x00 , 0xC0 , 0x39 , 0x00 , 0x00 , 0xE0 , 0xF8 , 0x3F , 0x00 , 0xF0 , 0xF8 , 0x3F , 0xFF , 0x7B , 0x00 , 0x30 , 0xFF , 0x3F , 0xC0 , 0x3F , 0x07 , 0x1F , 0xC0 , 0x3F , 0x07 , 0x07 , 0x80 , 0x3F , 0x07 , 0x03 , 0x00 , 0x30 , 0x07 , 0x03 , 0xC0 , 0x3F , 0x07 , 0x03 , 0xC0 , 0x3F , 0x07 , 0x03 , 0x00 , 0x30 , 0x07 , 0x03 , 0x00 , 0x38 , 0x07 , 0x03 , 0xC0 , 0x1F , 0x07 , 0x03 , 0xC0 , 0x1F , 0x07 , 0x0F , 0x00 , 0x0C , 0x07 , 0x1F , 0x00 , 0x0F , 0xFF , 0xFF , 0xFF , 0x07 , 0xFF , 0xF3 , 0xFF , 0x03 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , }; // \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0432\u0430\u043d\u0435 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u0442\u0430: \u0437\u0430\u0432\u044a\u0440\u0442\u0430\u043d\u0435, RESET \u043f\u0438\u043d, SCL \u043f\u0438\u043d, SDA \u043f\u0438\u043d U8G2_SSD1306_128X64_NONAME_1_HW_I2C u8g2 ( U8G2_R0 , U8X8_PIN_NONE , I2C_SCL_pin , I2C_SDA_pin ); void setup () { // \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u0442\u0430 u8g2 . begin (); } void loop () { // \u043d\u0430\u0447\u0430\u043b\u043e \u043d\u0430 \u0438\u0437\u0447\u0435\u0440\u0442\u0430\u0432\u0430\u043d\u0435\u0442\u043e u8g2 . firstPage (); do { u8g2 . drawFrame ( 0 , 0 , u8g2 . getDisplayWidth (), u8g2 . getDisplayHeight () ); // \u0442\u0435\u043a\u0441\u0442: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043d\u0430 \u0448\u0440\u0438\u0444\u0442\u0430, \u0446\u0432\u044f\u0442, \u043f\u043e\u0441\u043e\u043a\u0430 \u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u044f u8g2 . setFont ( u8g2_font_6x10_tf ); u8g2 . setFontRefHeightExtendedText (); u8g2 . setDrawColor ( 1 ); u8g2 . setFontPosTop (); u8g2 . setFontDirection ( 0 ); u8g2 . drawStr ( 34 , 10 , \"VB-tronics\" ); // \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u0440\u0435\u0436\u0438\u043c, \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0438 // https://www.online-utility.org/image/convert/to/XBM u8g2 . setBitmapMode ( false /* solid */ ); u8g2 . drawXBMP ( 1 , 1 , 30 , 30 , happy_30x30 ); u8g2 . drawXBMP ( 97 , 1 , 30 , 30 , like_30x30 ); // \u043f\u0440\u0430\u0432\u043e\u044a\u0433\u044a\u043b\u043d\u0438\u043a: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0438 u8g2 . drawFrame ( 10 , 35 , 10 , 10 ); // \u0437\u0430\u043f\u044a\u043b\u043d\u0435\u043d \u043f\u0440\u0430\u0432\u043e\u044a\u0433\u044a\u043b\u043d\u0438\u043a: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0438 u8g2 . drawBox ( 10 , 50 , 10 , 10 ); // \u043e\u043a\u0440\u044a\u0436\u043d\u043e\u0441\u0442: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u0446\u0435\u043d\u0442\u044a\u0440 \u0438 \u0440\u0430\u0434\u0438\u0443\u0441 u8g2 . drawCircle ( 45 , 40 , 5 ); // \u0437\u0430\u043f\u044a\u043b\u043d\u0435\u043d\u0430 \u043e\u043a\u0440\u044a\u0436\u043d\u043e\u0441\u0442: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u0446\u0435\u043d\u0442\u044a\u0440 \u0438 \u0440\u0430\u0434\u0438\u0443\u0441 u8g2 . drawDisc ( 45 , 55 , 5 ); // \u043f\u0440\u0430\u0432\u043e\u044a\u0433\u044a\u043b\u043d\u0438\u043a \u0441\u044a\u0441 \u0437\u0430\u043e\u0431\u043b\u0435\u043d\u0438 \u044a\u0433\u043b\u0438: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044f, \u0440\u0430\u0437\u043c\u0435\u0440\u0438 \u0438 \u0440\u0430\u0434\u0438\u0443\u0441 \u043d\u0430 \u0437\u0430\u043e\u0431\u043b\u044f\u043d\u0435 u8g2 . drawRFrame ( 70 , 35 , 20 , 10 , 5 ); // \u0437\u0430\u043f\u044a\u043b\u043d\u0435\u043d \u043f\u0440\u0430\u0432\u043e\u044a\u0433\u044a\u043b\u043d\u0438\u043a \u0441\u044a\u0441 \u0437\u0430\u043e\u0431\u043b\u0435\u043d\u0438 \u044a\u0433\u043b\u0438: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044f, \u0440\u0430\u0437\u043c\u0435\u0440\u0438 \u0438 \u0440\u0430\u0434\u0438\u0443\u0441 \u043d\u0430 \u0437\u0430\u043e\u0431\u043b\u044f\u043d\u0435 u8g2 . drawRBox ( 70 , 50 , 20 , 10 , 5 ); // \u043b\u0438\u043d\u0438\u0438: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u0438 \u043a\u0440\u0430\u0439 u8g2 . drawLine ( 110 , 35 , 115 , 45 ); u8g2 . drawLine ( 115 , 45 , 105 , 45 ); u8g2 . drawLine ( 105 , 45 , 110 , 35 ); // \u0442\u0440\u0438\u044a\u0433\u044a\u043b\u043d\u0438\u043a: \u0437\u0430\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u0442\u0440\u0438\u0442\u0435 \u0442\u043e\u0447\u043a\u0438 u8g2 . drawTriangle ( 110 , 50 , 115 , 60 , 105 , 60 ); // \u043a\u0440\u0430\u0439 \u043d\u0430 \u0438\u0437\u0447\u0435\u0440\u0442\u0430\u0432\u0430\u043d\u0435\u0442\u043e } while ( u8g2 . nextPage () ); } \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435","title":"12. \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u043d OLED \u0434\u0438\u0441\u043f\u043b\u0435\u0439"},{"location":"examples/13-mems/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435","title":"13. \u0416\u0438\u0440\u043e\u0441\u043a\u043e\u043f/\u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u044a\u0440"},{"location":"examples/14-onboard-eeprom/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u0435\u043d \u043a\u043e\u0434 \u041f\u0440\u0438\u043d\u0446\u0438\u043f\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u0441\u0432\u044a\u0440\u0437\u0432\u0430\u043d\u0435","title":"14. \u0414\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0430 (\u0432\u044a\u043d\u0448\u043d\u0430) EEPROM \u043f\u0430\u043c\u0435\u0442"},{"location":"examples/99-demo/","text":"\u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430 \u0431\u0443\u0442\u043e\u043d","title":"99. \u0414\u0435\u043c\u043e"}]}